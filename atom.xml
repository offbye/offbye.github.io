<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>offbye</title>
  <subtitle>关注移动架构，Android，HTML5，iOS技术前沿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://offbye.com/"/>
  <updated>2016-05-28T07:35:13.000Z</updated>
  <id>http://offbye.com/</id>
  
  <author>
    <name>offbye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jenkins-xcodebuild命令行打包iOS项目问题汇总</title>
    <link href="http://offbye.com/2016/05/28/jenkins-xcodebuild%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%8C%85iOS%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://offbye.com/2016/05/28/jenkins-xcodebuild命令行打包iOS项目问题汇总/</id>
    <published>2016-05-28T14:17:37.000Z</published>
    <updated>2016-05-28T07:35:13.000Z</updated>
    
    <content type="html">&lt;p&gt;这几天折腾了jenkins对iOS swift项目的持续集成，碰到了很多问题，记录下吧&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-缺少scheme&quot;&gt;&lt;a href=&quot;#1-缺少scheme&quot; class=&quot;headerlink&quot; title=&quot;1. 缺少scheme&quot;&gt;&lt;/a&gt;1. 缺少scheme&lt;/h2&gt;&lt;p&gt;xcodebuild: error: The project named “Foo” does not contain a scheme named “Bar”. The “-list” option can be used to find the names of the schemes in the project.&lt;/p&gt;
&lt;p&gt;解决办法：&lt;br&gt;The root cause is that the default behavior of Schemes is to keep schemes ‘private’ until they are specifically marked as shared. In the case of a command-line initiated build, the Xcode UI never runs and the xcoderun tool doesn’t have its own cache of Schemes to work with.&lt;br&gt;To your schema be visible for command-line build you must mark it as a shared scheme.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Choose Scheme &amp;gt; Manage Schemes (from the Product Menu).&lt;br&gt;Ensure the ‘Shared’ box is checked for that scheme&lt;br&gt;A new .xcscheme file has been created in your project at&lt;br&gt;WorkspaceName.xcworkspace/xcshareddata/xcschemes.&lt;br&gt;Commit this file to your repository&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-Error-User-interaction-is-not-allowed&quot;&gt;&lt;a href=&quot;#2-Error-User-interaction-is-not-allowed&quot; class=&quot;headerlink&quot; title=&quot;2.  Error:   User interaction is not allowed.&quot;&gt;&lt;/a&gt;2.  Error:   User interaction is not allowed.&lt;/h2&gt;&lt;p&gt;运行下面的命令可解决&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ security unlock-keychain -p  ~/Library/Keychains/login.keychain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ security show-keychain-info ~/Library/Keychains/login.keychain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Keychain &amp;quot;/Users/XXX/Library/Keychains/login.keychain&amp;quot; no-timeout&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-Xcode-7后导出IPA命令发生变化&quot;&gt;&lt;a href=&quot;#3-Xcode-7后导出IPA命令发生变化&quot; class=&quot;headerlink&quot; title=&quot;3. Xcode 7后导出IPA命令发生变化&quot;&gt;&lt;/a&gt;3. Xcode 7后导出IPA命令发生变化&lt;/h2&gt;&lt;p&gt;以前我是通过下面的命令打包的，但现在的swift项目这样导出的包在iPhone安装后直接闪退&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xcodebuild -target $&amp;#123;TARGET_NAME&amp;#125; -configuration $&amp;#123;BUILD_CONFIGURATION&amp;#125; -sdk phones build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xcrun -sdk iphoneos PackageApplication -v $&amp;#123;APP_NAME&amp;#125; -o $&amp;#123;IPA_PATH&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Xcode7之后取消了原来的-exportFormat，而是使用exportOptionsPlist 来取代，具体的使用方法可以在Terminal打xcodebuild –help查看。&lt;br&gt;我们需要自己创建一个plist作为Export Options，只要有这个配置文件，那我们在使用这个命令的时候就能打出跟手动用Xcode Archive之后export出的ipa一样了。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;plist&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;version&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;teamID&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;XXXXXXX&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;method&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;enterprise&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;compileBitcode&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;false&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;uploadSymbols&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;key&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;false&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dict&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;plist&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-最新的xcodebuild-导出ipa命令&quot;&gt;&lt;a href=&quot;#4-最新的xcodebuild-导出ipa命令&quot; class=&quot;headerlink&quot; title=&quot;4. 最新的xcodebuild 导出ipa命令&quot;&gt;&lt;/a&gt;4. 最新的xcodebuild 导出ipa命令&lt;/h2&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xcodebuild -target XXXX -configuration Release build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xcodebuild archive -project &amp;#123;xcodeproj&amp;#125; -scheme &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;scheme&amp;#125;&#39;&lt;/span&gt; -sdk iphoneos  -archivePath &amp;#123;archive_path&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xcodebuild -exportArchive -archivePath  &amp;#123;archive_path&amp;#125; -exportPath &amp;#123;export_path&amp;#125;  -exportOptionsPlist &amp;#123;export_plist_path&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;[本文独立博客地址](&lt;a href=&quot;http://www.offbye.com）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.offbye.com）&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这几天折腾了jenkins对iOS swift项目的持续集成，碰到了很多问题，记录下吧&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python读取iOS安装包IPA中的信息和图片</title>
    <link href="http://offbye.com/2016/05/27/Python%E8%AF%BB%E5%8F%96iOS%E5%AE%89%E8%A3%85%E5%8C%85IPA%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF/"/>
    <id>http://offbye.com/2016/05/27/Python读取iOS安装包IPA中的信息/</id>
    <published>2016-05-27T13:32:36.000Z</published>
    <updated>2016-05-28T13:30:06.000Z</updated>
    
    <content type="html">&lt;p&gt;最近需要对所有的iOS和Android工程通过jenkins持续集成，软件的编译、打包、企业分发版的ipa发布都需要自动化。在做ipa自动化发布时，需要拿到一个app里面相关的信息，比如显示名称、版本号、bundle identifier等等。&lt;br&gt;然后在Jenkins构建任务中通过增加Python脚本针对每个版本生成IPA,plist和包含itms安装链接的网页。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;首先需要对iOS ipa包的结构有些了解。&lt;/p&gt;
&lt;h2 id=&quot;iOS-IPA文件结构&quot;&gt;&lt;a href=&quot;#iOS-IPA文件结构&quot; class=&quot;headerlink&quot; title=&quot;iOS IPA文件结构&quot;&gt;&lt;/a&gt;iOS IPA文件结构&lt;/h2&gt;&lt;p&gt;首先，一个ipa其实就是一个zip文件改了后缀名。如果你把ipa的后缀改回.zip，那么你就能通过各种解压软件直接解压了。&lt;/p&gt;
&lt;p&gt;解压后的目录结构是:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Payload&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    |-- 软件名.app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        |-- ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        |-- ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        |-- Info.plist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中，Info.plist就是软件信息的所在。&lt;/p&gt;
&lt;p&gt;但是别高兴得太早，这里的Info.plist并不是纯文本文件，而是一种被称为Binary Plist的东西。之前在做iOS开发时，工程里面用的plist几乎都是XML形式的纯文本文件，所以一开始我理所当然地认为这个也是纯文本文件，结果在这里卡了半天。在命令行运行man plist就能看到下面这段话：&lt;/p&gt;
&lt;p&gt;The property list programming interface allows you to convert hierarchically structured combinations of these basic types to and from two formats: standard XML and an optimized, opaque binary format.&lt;br&gt;所以不能看到.plist结尾的文件就当文本文件处理。&lt;/p&gt;
&lt;h2 id=&quot;PYTHON中相应的LIBRARY，biplist和plistlib&quot;&gt;&lt;a href=&quot;#PYTHON中相应的LIBRARY，biplist和plistlib&quot; class=&quot;headerlink&quot; title=&quot;PYTHON中相应的LIBRARY，biplist和plistlib&quot;&gt;&lt;/a&gt;PYTHON中相应的LIBRARY，biplist和plistlib&lt;/h2&gt;&lt;p&gt;在知道ipa的结构之后，就能知道需要用哪些Python library了，第一个是zipfile，这个库能够处理zip类型的文件，并且可以在不解压的情况下读取里面某个文件的内容。另外一个是plistlib。但是需要注意的是，在Python 3.4之前，这个库是不支持 Binary Plist 的解析的。所以如果使用 Python 2.7 的话，需要使用三方库biplist。&lt;/p&gt;
&lt;p&gt;下面使用 Python 3.4 为例进行解析。之所以选择 Python 3.x 是因为 2.x 版本在处理 Unicode 和非 Unicode 混用时非常麻烦。而 Python 3.x 起，所有的 string 都使用 Unicode 编码了，就跟 ObjC 中一样。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; zipfile, plistlib, sys, re&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;analyze_ipa_with_plistlib&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ipa_path)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ipa_file = zipfile.ZipFile(ipa_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plist_path = find_plist_path(ipa_file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plist_data = ipa_file.read(plist_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plist_root = plistlib.loads(plist_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print_ipa_info (plist_root)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;find_plist_path&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(zip_file)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name_list = zip_file.namelist()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pattern = re.compile(&lt;span class=&quot;string&quot;&gt;r&#39;Payload/[^/]*.app/Info.plist&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; path &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; name_list:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        m = pattern.match(path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; m &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; m.group()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print_ipa_info&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(plist_root)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Display Name: %s&#39;&lt;/span&gt; % plist_root[&lt;span class=&quot;string&quot;&gt;&#39;CFBundleDisplayName&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Bundle Identifier: %s&#39;&lt;/span&gt; % plist_root[&lt;span class=&quot;string&quot;&gt;&#39;CFBundleIdentifier&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Version: %s&#39;&lt;/span&gt; % plist_root[&lt;span class=&quot;string&quot;&gt;&#39;CFBundleShortVersionString&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    args = sys.argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(args) &amp;amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Usage: python3 ipaanalyze.py /path/to/ipa&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ipa_path = args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    analyze_ipa_with_plistlib(ipa_path)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先使用zipfile将ipa文件打开，zipfile中，namelist()方法能够列出里面包含的所有文件路径，并返回一个list。根据ipa的结构，我们要找的Info.plist是Payload/软件名字.app/Info.plist，所以这里使用一个正则表达式找到这个文件路径。&lt;/p&gt;
&lt;p&gt;ZipFile.read()这个方法，能够在不解压zip文件的情况下读取里面的内容，在Python 3.4中返回的是bytes类型，再使用plistlib.loads()载入。其中，loads()是 Python 3.4 才加入的新API，它接收一个bytes对象，将其解析成相应的Python对象。&lt;/p&gt;
&lt;p&gt;这样，这个plist文件就变成了一个dict，从而可以取到里面的内容。&lt;/p&gt;
&lt;p&gt;如果使用 Python 2.7， 则可以用biplist代替，这个库使用的是跟 Python 2.7 中plistlib相同的API,由于不想改服务器上默认的python2.7，我使用的是biplist。代码如下：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info_plist = workspace + &lt;span class=&quot;string&quot;&gt;&quot;/build/Release-iphoneos/&quot;&lt;/span&gt; + project + &lt;span class=&quot;string&quot;&gt;&quot;.app/Info.plist&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(info_plist)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plist = readPlist(info_plist)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; (InvalidPlistException, NotBinaryPlistException), e:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Not a plist:&quot;&lt;/span&gt;, e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;display_name = plist[&lt;span class=&quot;string&quot;&gt;&#39;CFBundleDisplayName&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;identifier = plist[&lt;span class=&quot;string&quot;&gt;&#39;CFBundleIdentifier&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;short_version = plist[&lt;span class=&quot;string&quot;&gt;&#39;CFBundleShortVersionString&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Display Name: %s&#39;&lt;/span&gt; % display_name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Bundle Identifier: %s&#39;&lt;/span&gt; % identifier)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&#39;Version: %s&#39;&lt;/span&gt; % short_version)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果不使用 Python，或者不想用这些类库，则可以通过一些外部程序来解决Binary Plist的读取问题。比如使用/usr/libexec/PlistBuddy或者是plutil，这些都是 OS X 自带的工具，通过它们，你可以读取Plist中的指定项，或者直接把plist变成JSON文件。&lt;/p&gt;
&lt;h2 id=&quot;读取ipa-app目录下的图片并还原&quot;&gt;&lt;a href=&quot;#读取ipa-app目录下的图片并还原&quot; class=&quot;headerlink&quot; title=&quot;读取ipa .app目录下的图片并还原&quot;&gt;&lt;/a&gt;读取ipa .app目录下的图片并还原&lt;/h2&gt;&lt;p&gt;由于Xcode工程中图标的文件名和位置都不固定，拿到AppIcon需要分析工程文件和AppIcon.appiconset/Contents.json文件内容，感觉分析过程太复杂了，容易出错误，因此还是想通过分析编译后的build/Release-iphoneos/myproject.app/包目录下找。app中所有的图片都在根目录下，但这些图片文件已经被xcode处理过了，在浏览器中显示为空白，因此需要想办法把图片文件还原。&lt;br&gt;在网上找到了一个python脚本，&lt;a href=&quot;http://www.axelbrz.com.ar/?mod=iphone-png-images-normalizer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iPIn iPhone PNG Images Normalizer&lt;/a&gt;, 感觉这个代码时间太久了，2007年写的，测试了下不能处理正确图片。&lt;br&gt;在这篇文章的评论里面发现一个链接&lt;a href=&quot;https://gist.github.com/urielka/3609051，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/urielka/3609051，&lt;/a&gt; 应该是个2012年的改进版本，看下面的评论说是可用，实验了下果然可以。图标问题解决了，处理后的图片可以在浏览器正常显示了。&lt;/p&gt;
&lt;p&gt;[本文独立博客地址](&lt;a href=&quot;http://www.offbye.com/）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.offbye.com/）&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要对所有的iOS和Android工程通过jenkins持续集成，软件的编译、打包、企业分发版的ipa发布都需要自动化。在做ipa自动化发布时，需要拿到一个app里面相关的信息，比如显示名称、版本号、bundle identifier等等。&lt;br&gt;然后在Jenkins构建任务中通过增加Python脚本针对每个版本生成IPA,plist和包含itms安装链接的网页。&lt;/p&gt;
    
    </summary>
    
    
      <category term="IPA" scheme="http://offbye.com/tags/IPA/"/>
    
      <category term="python" scheme="http://offbye.com/tags/python/"/>
    
      <category term="biplist" scheme="http://offbye.com/tags/biplist/"/>
    
      <category term="iOS打包" scheme="http://offbye.com/tags/iOS%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>F8App-ReactNative项目源码分析4-js篇</title>
    <link href="http://offbye.com/2016/05/23/F8App-ReactNative%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%904-js%E7%AF%87/"/>
    <id>http://offbye.com/2016/05/23/F8App-ReactNative项目源码分析4-js篇/</id>
    <published>2016-05-23T13:42:12.000Z</published>
    <updated>2016-05-28T14:25:26.000Z</updated>
    
    <content type="html">&lt;p&gt;本文开始分析f8app核心js部分的源码，这篇文章将非常难理解，原因了Redux框架引入了很多新概念，使用了大量函数式编程思想，建议先把后面的参考文章仔细过一遍，确保理解后再看本文。React Native的理念是Learn once,write anywhere, Android和iOS App端的js代码是放在一起的，以便最大限度的复用业务逻辑，UI部分的可以根据平台特性各自实现，React native分别渲染成安卓和iOS的原生UI界面，对于两个平台UI组件的细微差异和完全不同的UI组件2种情况，react native提供了不同的处理方式。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;js入口分析&quot;&gt;&lt;a href=&quot;#js入口分析&quot; class=&quot;headerlink&quot; title=&quot;js入口分析&quot;&gt;&lt;/a&gt;js入口分析&lt;/h2&gt;&lt;p&gt;React Native Android App和iOS App的入口jsbundle对应的默认js源文件分别是index.android.js和index.ios.js，在f8app中这2个文件内容一致。代码如下：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123;AppRegistry&amp;#125; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;react-native&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; setup = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./js/setup&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AppRegistry.registerComponent(&lt;span class=&quot;string&quot;&gt;&#39;F8v2&#39;&lt;/span&gt;, setup);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;React Native采用了组件化编程的思想，在React Native项目中，所有展示的界面，都可以看做是一个组件（Component）。&lt;br&gt;index.android.js利用Node.js的require机制引入setup包，然后注册到AppRegistry.&lt;/p&gt;
&lt;h2 id=&quot;js目录结构分析&quot;&gt;&lt;a href=&quot;#js目录结构分析&quot; class=&quot;headerlink&quot; title=&quot;js目录结构分析&quot;&gt;&lt;/a&gt;js目录结构分析&lt;/h2&gt;&lt;p&gt;首先还是先看下js目录的结构:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├── F8App.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── F8Navigator.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── FacebookSDK.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── Playground.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── PushNotificationsController.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── actions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── config.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── filter.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── installation.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── login.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── navigation.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── notifications.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── parse.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── schedule.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── surveys.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── test.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── types.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── common&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── BackButtonIcon.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── Carousel.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8Button.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8Colors.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8DrawerLayout.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8Header.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8PageControl.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8SegmentedControl.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8StyleSheet.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8Text.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8Touchable.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── ItemsWithSeparator.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── ListContainer.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── LoginButton.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── MapView.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── ParallaxBackground.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── ProfilePicture.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── PureListView.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── ViewPager.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── img&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── env.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── filter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── FilterScreen.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── FriendsList.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── Header.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── Section.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── TopicItem.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── flow-lib.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── login&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── LoginModal.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── LoginScreen.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── img&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── rating&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── Header.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── RatingCard.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── RatingQuestion.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── RatingScreen.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── img&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── reducers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── __mocks__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── parse.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── __tests__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── maps-test.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── notifications-test.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── schedule-test.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── config.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── createParseReducer.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── filter.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── friendsSchedules.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── maps.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── navigation.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── notifications.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── schedule.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── sessions.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── surveys.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── topics.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── user.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── setup.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── store&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── analytics.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── array.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── configureStore.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── promise.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── track.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── tabs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── F8TabsView.android.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── F8TabsView.ios.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── MenuItem.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── img&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── CommonQuestions.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── F8InfoView.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── LinksList.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── Section.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── ThirdPartyNotices.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── WiFiDetails.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   └── img&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── maps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── F8MapView.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── ZoomableImage.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   └── img&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── notifications&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── F8NotificationsView.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── NotificationCell.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── PushNUXModal.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── RateSessionsCell.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── allNotifications.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── findSessionByURI.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   ├── img&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    │   └── unseenNotificationsCount.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── schedule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── AddToScheduleButton.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── EmptySchedule.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── F8FriendGoing.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── F8SessionCell.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── F8SessionDetails.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── F8SpeakerProfile.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── FilterHeader.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── FriendCell.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── FriendsListView.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── FriendsScheduleView.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── FriendsUsingApp.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── GeneralScheduleView.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── InviteFriendsButton.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── MyScheduleView.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── ProfileButton.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── ScheduleListView.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── SessionsCarousel.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── SessionsSectionHeader.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── SharingSettingsCommon.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── SharingSettingsModal.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── SharingSettingsScreen.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── __tests__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        │   ├── formatDuration-test.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        │   └── formatTime-test.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── filterSessions.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── formatDuration.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── formatTime.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ├── groupSessions.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        └── img&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;js部分的代码理解起来还是比较困难的，首先要熟悉javascript ES6，React Native和redux的常见语法，否则直接看代码会很困难，主要涉及的新概念比较多，语法比较奇怪。&lt;br&gt;redux - 架构上深受 flux 启发，实现上却更接近于 elm，或者说更倾向于函数式编程的一个数据层实现。和 flux 架构对数据层的描述最大的区别就在于 redux 是采用不可变单一状态树来管理应用程序数据的。用 redux 充当数据层也可以完全兼容 flux 架构（但没好处）并且 redux 对视图层也没有倾向性，只是目前用的比较多的还是 react。redux使用了很多函数式编程的概念，例如柯里化等的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;actions目录下的js实现了业务层的逻辑。&lt;/li&gt;
&lt;li&gt;common目录下是抽取的一些UI组件，react是基于组件化编程的。&lt;/li&gt;
&lt;li&gt;filter目录下是一些UI组件页面，暂时没有想明白为什么叫filter&lt;/li&gt;
&lt;li&gt;login目录下是登录页面，提供了通过Facebook帐号登录F8app的功能&lt;/li&gt;
&lt;li&gt;rating目录下是投票和问卷相关的页面&lt;/li&gt;
&lt;li&gt;reduces目录是redux Reducer相关的文件。Redux有且只有一个State状态树，为了避免这个状态树变得越来越复杂，Redux通过 Reducers来负责管理整个应用的State树，而Reducers可以被分成一个个Reducer。&lt;/li&gt;
&lt;li&gt;store目录下是redux store相关的文件&lt;/li&gt;
&lt;li&gt;tabs目录下是App 4个tab页面的源文件&lt;br&gt;整个目录结构划分还是比较合理的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;真正理解Redux&quot;&gt;&lt;a href=&quot;#真正理解Redux&quot; class=&quot;headerlink&quot; title=&quot;真正理解Redux&quot;&gt;&lt;/a&gt;真正理解Redux&lt;/h1&gt;&lt;p&gt;下面是知乎上对Redux的一个比较好的解释,弄明白了Redux我们才有能力分析f8app js的代码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;理解 React，但不理解 Redux，该如何通俗易懂的理解 Redux？&lt;br&gt;解答这个问题并不困难：唯一的要求是你熟悉React。&lt;br&gt;不要光听别人描述名词，理解起来是很困难的。&lt;br&gt;从需求出发，看看使用React需要什么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;React有props和state: props意味着父级分发下来的属性，state意味着组件内部可以自行管理的状态，并且整个React没有数据向上回溯的能力，也就是说数据只能单向向下分发，或者自行内部消化。&lt;br&gt;理解这个是理解React和Redux的前提。&lt;/li&gt;
&lt;li&gt;一般构建的React组件内部可能是一个完整的应用，它自己工作良好，你可以通过属性作为API控制它。但是更多的时候发现React根本无法让两个组件互相交流，使用对方的数据。&lt;br&gt;然后这时候不通过DOM沟通（也就是React体制内）解决的唯一办法就是提升state，将state放到共有的父组件中来管理，再作为props分发回子组件。&lt;/li&gt;
&lt;li&gt;子组件改变父组件state的办法只能是通过onClick触发父组件声明好的回调，也就是父组件提前声明好函数或方法作为契约描述自己的state将如何变化，再将它同样作为属性交给子组件使用。&lt;br&gt;这样就出现了一个模式：数据总是单向从顶层向下分发的，但是只有子组件回调在概念上可以回到state顶层影响数据。这样state一定程度上是响应式的。&lt;/li&gt;
&lt;li&gt;为了面临所有可能的扩展问题，最容易想到的办法就是把所有state集中放到所有组件顶层，然后分发给所有组件。&lt;/li&gt;
&lt;li&gt;为了有更好的state管理，就需要一个库来作为更专业的顶层state分发给所有React应用，这就是Redux。让我们回来看看重现上面结构的需求：&lt;br&gt;a. 需要回调通知state (等同于回调参数) -&amp;gt; action&lt;br&gt;b. 需要根据回调处理 (等同于父级方法) -&amp;gt; reducer&lt;br&gt;c. 需要state (等同于总状态) -&amp;gt; store&lt;br&gt;对Redux来说只有这三个要素：&lt;br&gt;a. action是纯声明式的数据结构，只提供事件的所有要素，不提供逻辑。&lt;br&gt;b. reducer是一个匹配函数，action的发送是全局的：所有的reducer都可以捕捉到并匹配与自己相关与否，相关就拿走action中的要素进行逻辑处理，修改store中的状态，不相关就不对state做处理原样返回。&lt;br&gt;c. store负责存储状态并可以被react api回调，发布action.&lt;br&gt;当然一般不会直接把两个库拿来用，还有一个binding叫react-redux, 提供一个Provider和connect。很多人其实看懂了redux卡在这里。&lt;br&gt;a. Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以了。它会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。&lt;br&gt;b. connect是真正的重点，它是一个科里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：&lt;br&gt;mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。&lt;br&gt;mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要科里化的原因。&lt;br&gt;做好以上流程Redux和React就可以工作了。简单地说就是：&lt;br&gt;1.顶层分发状态，让React组件被动地渲染。&lt;br&gt;2.监听事件，事件有权利回到所有状态顶层影响状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;和 Flux 一样，Redux 让应用的状态变化变得更加可预测。如果你想改变应用的状态，就必须 dispatch 一个 action。你没有办法直接改变应用的状态，因为保存这些状态的东西（称为 store）只有 getter 而没有 setter。对于 Flux 和 Redux 来说，这些概念都是相似的。&lt;/p&gt;
&lt;p&gt;那么为什么要新设计一种架构呢？Redux 的创造者 Dan Abramov 发现了改进 Flux 架构的可能。他想要一个更好的开发者工具来调试 Flux 应用。他发现如果稍微对 Flux 架构进行一些调整，就可以开发出一款更好用的开发者工具，同时依然能享受 Flux 架构带给你的可预测性。&lt;/p&gt;
&lt;p&gt;Redux包含了代码热替换（hot reload）和时间旅行（time travel）功能。&lt;/p&gt;
&lt;h2 id=&quot;智能组件（smart-components）和木偶组件-dumb-components&quot;&gt;&lt;a href=&quot;#智能组件（smart-components）和木偶组件-dumb-components&quot; class=&quot;headerlink&quot; title=&quot;智能组件（smart components）和木偶组件(dumb components)&quot;&gt;&lt;/a&gt;智能组件（smart components）和木偶组件(dumb components)&lt;/h2&gt;&lt;p&gt;Flux 拥有控制型视图（controller views） 和常规型视图（regular views）。控制型视图就像是一个经理一样，管理着 store 和子视图（child views）之间的通信。&lt;/p&gt;
&lt;p&gt;在 Redux 中，也有一个类似的概念：智能组件和木偶组件。（注：在最新的 Redux 文档中，它们分别叫做容器型组件 Container component 和展示型组件 Presentational component）智能组件的职责就像经理一样，但是比起 Flux 中的角色，Redux 对经理的职责有了更多的定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;智能组件负责所有的 action 相关的工作。如果智能组件里包含的一个木偶组件需要触发一个 action，智能组件会通过 props 传一个 function 给木偶组件，而木偶组件可以在需要触发 action 时调用这个 function。&lt;/li&gt;
&lt;li&gt;智能组件不定义 CSS 样式。&lt;/li&gt;
&lt;li&gt;智能组件几乎不会产生自己的 DOM 节点，他的工作是组织若干的木偶组件，由木偶组件来生成最终的 DOM 节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;setup-js代码分析&quot;&gt;&lt;a href=&quot;#setup-js代码分析&quot; class=&quot;headerlink&quot; title=&quot;setup.js代码分析&quot;&gt;&lt;/a&gt;setup.js代码分析&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//js/setup.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; F8App = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;F8App&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; FacebookSDK = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;FacebookSDK&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Parse = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;parse/react-native&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; React = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;React&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Relay = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;react-relay&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123; Provider &amp;#125; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;react-redux&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; configureStore = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./store/configureStore&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123;serverURL&amp;#125; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./env&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setup&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.disableYellowBox = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Parse.initialize(&lt;span class=&quot;string&quot;&gt;&#39;oss-f8-app-2016&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Parse.serverURL = &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;serverURL&amp;#125;&lt;/span&gt;/parse`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  FacebookSDK.init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Parse.FacebookUtils.init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Relay.injectNetworkLayer(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Relay.DefaultNetworkLayer(&lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;serverURL&amp;#125;&lt;/span&gt;/graphql`&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      fetchTimeout: &lt;span class=&quot;number&quot;&gt;30000&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      retryDelays: [&lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Root&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isLoading: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        store: configureStore(() =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;isLoading: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.isLoading) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;Provider store=&amp;#123;this.state.store&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;F8App /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/Provider&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;global.LOG = (...args) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;/------------------------------\\&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(...args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;\\------------------------------/&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; args[args.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = setup;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;setup.js负责对整个app进行配置，首先配置了Parse,FacebookSDK和Relay，这3个组件是服务器端相关的。&lt;br&gt;然后通过react-redux配置了Provider组件，这个组件包裹在整个组件树的最外层。这个组件让根组件的所有子孙组件能够轻松的使用 connect() 方法绑定 store。Provider 本质上创建了一个用于更新视图组件的网络。那些智能组件通过 connect() 方法连入这个网络，以此确保他们能够获取到状态的更新。&lt;br&gt;configureStore提供了对Store的创建和配置，由于Redux只有一个store，如果让store 完全独立处理自己的事，store会变的很复杂。因此，Redux 中的 store 首先会保存整个应用的所有状态，然后将「判断哪一部分状态需要改变」的任务分配下去。而以根 reducer（root reducer）为首的 reducer 们将会承担这个任务。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ./js/store/configureStore.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#39;use strict&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123;applyMiddleware, createStore&amp;#125; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;redux&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; thunk = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;redux-thunk&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; promise = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./promise&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./array&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; analytics = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./analytics&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; reducers = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;../reducers&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; createLogger = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;redux-logger&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123;persistStore, autoRehydrate&amp;#125; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;redux-persist&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &amp;#123;AsyncStorage&amp;#125; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;react-native&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isDebuggingInChrome = __DEV__ &amp;amp;&amp;amp; !!&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.navigator.userAgent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; logger = createLogger(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  predicate: (getState, action) =&amp;gt; isDebuggingInChrome,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  collapsed: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  duration: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; createF8Store = applyMiddleware(thunk, promise, array, analytics, logger)(createStore);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;configureStore&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;onComplete: ?(&lt;/span&gt;) =&amp;gt; &lt;span class=&quot;title&quot;&gt;void&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// TODO(frantic): reconsider usage of redux-persist, maybe add cache breaker&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; store = autoRehydrate()(createF8Store)(reducers);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  persistStore(store, &amp;#123;storage: AsyncStorage&amp;#125;, onComplete);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isDebuggingInChrome) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.store = store;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; store;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = configureStore;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;createF8Store使用了柯里化方法调用了applyMiddleware&lt;/p&gt;
&lt;h1 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/camsong/redux-in-chinese&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redux 中文文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jasonslyvia/a-cartoon-intro-to-redux-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《看漫画，学 Redux》 —— A cartoon intro to Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004391037&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redux源码详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/matthew-sun/blog/issues/18&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用Redux管理你的React应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/41312576&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理解 React，但不理解 Redux，该如何通俗易懂的理解 Redux&lt;/a&gt;&lt;br&gt;[本文独立博客地址](）&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文开始分析f8app核心js部分的源码，这篇文章将非常难理解，原因了Redux框架引入了很多新概念，使用了大量函数式编程思想，建议先把后面的参考文章仔细过一遍，确保理解后再看本文。React Native的理念是Learn once,write anywhere, Android和iOS App端的js代码是放在一起的，以便最大限度的复用业务逻辑，UI部分的可以根据平台特性各自实现，React native分别渲染成安卓和iOS的原生UI界面，对于两个平台UI组件的细微差异和完全不同的UI组件2种情况，react native提供了不同的处理方式。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>F8App-ReactNative项目源码分析3-Android</title>
    <link href="http://offbye.com/2016/05/19/F8App-ReactNative%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903-Android/"/>
    <id>http://offbye.com/2016/05/19/F8App-ReactNative项目源码分析3-Android/</id>
    <published>2016-05-19T02:16:34.000Z</published>
    <updated>2016-05-20T14:59:26.000Z</updated>
    
    <content type="html">&lt;p&gt;近期开始研究Facebook f8app项目，目标是理解Facebook官方React Native f8app的整体技术架构，给公司目前几个的React Native项目开发提供官方经验借鉴，并对原生开发和React Native开发进行框架层面的融合。&lt;br&gt;本文分析f8app android代码的结构和技术实现，阅读本文的前提是熟悉Android开发。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;f8app-android代码结构分析&quot;&gt;&lt;a href=&quot;#f8app-android代码结构分析&quot; class=&quot;headerlink&quot; title=&quot;f8app android代码结构分析&quot;&gt;&lt;/a&gt;f8app android代码结构分析&lt;/h2&gt;&lt;p&gt;ReactNative项目Android相关的代码都在android目录下，可以直接使用Android Studio打开这个目录方便查看和修改。android目录结构如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├── F8v2.iml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── app.iml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── build.gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── proguard-rules.pro&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── react.gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│           ├── AndroidManifest.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│           ├── java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│           │   └── com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│           │       └── facebook&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│           │           └── f8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│           │               └── MainActivity.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│           └── res&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               ├── mipmap-hdpi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               │   ├── ic_launcher.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               │   └── ic_notification.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               ├── mipmap-mdpi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               │   ├── ic_launcher.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               │   └── ic_notification.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               ├── mipmap-xhdpi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               │   ├── ic_launcher.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               │   └── ic_notification.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               ├── mipmap-xxhdpi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               │   ├── ic_launcher.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               │   └── ic_notification.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               ├── mipmap-xxxhdpi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               │   ├── ic_launcher.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               │   └── ic_notification.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               ├── raw&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               │   └── third_party_notices.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│               └── values&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│                   ├── strings.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│                   └── styles.xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── build.gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── wrapper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       ├── gradle-wrapper.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── gradle-wrapper.properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── gradle.properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── gradlew&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── gradlew.bat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── local.properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── settings.gradle&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在android Studio下显示如下：&lt;br&gt;￼&lt;br&gt;&lt;img src=&quot;http://o79096vir.bkt.clouddn.com/667c005f394c5c8cf85833ca5c5718f3.png&quot; alt=&quot;as文件结构&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;MainActivity-代码分析&quot;&gt;&lt;a href=&quot;#MainActivity-代码分析&quot; class=&quot;headerlink&quot; title=&quot;MainActivity 代码分析&quot;&gt;&lt;/a&gt;MainActivity 代码分析&lt;/h2&gt;&lt;p&gt;通过AndroidManifest.xml可以知道App的页面入口Activity是android/app/src/main/java/com/facebook/f8/MainActivity.java，代码比较简单，继承了ReactActivity,关键的方法是getJSBundleFile，可以看到使用了CodePush推送更新技术，返回了一个bundle文件，分析代码可知默认的bundle文件是index.android.bundle。&lt;br&gt;&lt;a href=&quot;http://microsoft.github.io/code-push//docs/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePush&lt;/a&gt;是微软提供的一个开发者服务，支持对React Native和Cordova App在不重新安装App的前提下热更新App，是目前很流行的一种App热部署技术。&lt;br&gt;getPackages方法初始化了CodePush，初始了ReactNativePushNotificationPackage推送服务，初始化了用到的一些RN第三方包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FBSDKPackage是Android Facebook SDK的React Native封装，让React Native App能够使用Facebook的接口，提供了Facebook用户登录token，分享等功能;&lt;/li&gt;
&lt;li&gt;LinearGradientPackage是一个渐变UI控件；&lt;/li&gt;
&lt;li&gt;RNSharePackage是个分享插件，提供了通过Android Intent.ACTION_SEND分享文字和链接的简单分享功能；&lt;/li&gt;
&lt;li&gt;RNSendIntentPackage是一个发送Android Intent的插件，提供了通过Intent拨打电话，发送短信，在系统日历添加事件提醒等功能。&lt;/li&gt;
&lt;li&gt;ReactNativePushNotificationPackage是一个本地和远程通知推送插件，可以接受Google GCM推送的消息，并在状态栏上显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReactActivity&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; CodePush _codePush;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ReactNativePushNotificationPackage _pushNotification;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; CallbackManager mCallbackManager;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getJSBundleFile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._codePush.getBundleUrl(&lt;span class=&quot;string&quot;&gt;&quot;index.android.bundle&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * Returns the name of the main component registered from JavaScript.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * This is used to schedule rendering of the component.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getMainComponentName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;F8v2&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * Returns whether dev mode should be enabled.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * This enables e.g. the dev menu.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getUseDeveloperSupport&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; BuildConfig.DEBUG;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * A list of packages used by the app. If the app uses additional views&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * or modules besides the default ones, add more packages here.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; List&amp;lt;ReactPackage&amp;gt; &lt;span class=&quot;title&quot;&gt;getPackages&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._codePush = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CodePush(&lt;span class=&quot;string&quot;&gt;&quot;qwfkzzq7Y8cSrkiuU7aRCkIP7XYLEJ6b-AFoe&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, BuildConfig.DEBUG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._pushNotification = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ReactNativePushNotificationPackage(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mCallbackManager = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CallbackManager.Factory().create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Arrays.&amp;lt;ReactPackage&amp;gt;asList(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MainReactPackage(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FBSDKPackage(mCallbackManager),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinearGradientPackage(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RNSharePackage(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RNSendIntentPackage(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._codePush.getReactPackage(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._pushNotification&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FacebookSdk.sdkInitialize(getApplicationContext());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onActivityResult&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; requestCode, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; resultCode, Intent data)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onActivityResult(requestCode, resultCode, data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      mCallbackManager.onActivityResult(requestCode, resultCode, data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onNewIntent&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(Intent intent)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onNewIntent(intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     _pushNotification.newIntent(intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onResume();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      AppEventsLogger.activateApp(getApplicationContext());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onPause();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      AppEventsLogger.deactivateApp(getApplicationContext());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onStop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onStop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      AppEventsLogger.onContextStop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以查看settings.gradle,发现f8app Android引用了5个子工程，子工程源码放在../node_modules目录下。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rootProject.name = &lt;span class=&quot;string&quot;&gt;&#39;F8v2&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;:app&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;:react-native-linear-gradient&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;:app&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;:react-native-code-push&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;:react-native-push-notification&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;:react-native-share&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;:app&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;:react-native-fbsdk&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;:react-native-send-intent&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;:app&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project(&lt;span class=&quot;string&quot;&gt;&#39;:react-native-linear-gradient&#39;&lt;/span&gt;).projectDir = new File(rootProject.projectDir, &lt;span class=&quot;string&quot;&gt;&#39;../node_modules/react-native-linear-gradient/android&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project(&lt;span class=&quot;string&quot;&gt;&#39;:react-native-code-push&#39;&lt;/span&gt;).projectDir = new File(rootProject.projectDir, &lt;span class=&quot;string&quot;&gt;&#39;../node_modules/react-native-code-push/android/app&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project(&lt;span class=&quot;string&quot;&gt;&#39;:react-native-push-notification&#39;&lt;/span&gt;).projectDir = file(&lt;span class=&quot;string&quot;&gt;&#39;../node_modules/react-native-push-notification/RNPushNotificationAndroid&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project(&lt;span class=&quot;string&quot;&gt;&#39;:react-native-share&#39;&lt;/span&gt;).projectDir = new File(rootProject.projectDir, &lt;span class=&quot;string&quot;&gt;&#39;../node_modules/react-native-share/android&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project(&lt;span class=&quot;string&quot;&gt;&#39;:react-native-fbsdk&#39;&lt;/span&gt;).projectDir = new File(settingsDir, &lt;span class=&quot;string&quot;&gt;&#39;../node_modules/react-native-fbsdk/Android&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;project(&lt;span class=&quot;string&quot;&gt;&#39;:react-native-send-intent&#39;&lt;/span&gt;).projectDir = new File(rootProject.projectDir, &lt;span class=&quot;string&quot;&gt;&#39;../node_modules/react-native-send-intent&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，可以通在settings.gradle引入工程的方法增加新的自定义RN插件。实际上，这些插件是通过rnpm install命令安装的。&lt;a href=&quot;https://github.com/rnpm/rnpm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native Package Manager (RNPM)&lt;/a&gt; 是一个简化React Native插件安装体验的工具。&lt;br&gt;下面我们分析react-native-linear-gradient插件看看插件是如何实现的。&lt;/p&gt;
&lt;h2 id=&quot;React-Native-android-插件实现分析&quot;&gt;&lt;a href=&quot;#React-Native-android-插件实现分析&quot; class=&quot;headerlink&quot; title=&quot;React Native android 插件实现分析&quot;&gt;&lt;/a&gt;React Native android 插件实现分析&lt;/h2&gt;&lt;p&gt;LinearGradientView是一个典型的原生UI插件，可以先看看官方的文档&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/docs/NativeComponentsAndroid.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NativeComponentsAndroid&lt;/a&gt;， 我感觉这个文档有点过时，没有提到ReactPackage。ReactPackage接口是现在RN插件的主入口。LinearGradientPackage实现了ReactPackage接口&lt;br&gt;ReactPackage接口代码如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Main interface for providing additional capabilities to the catalyst framework by couple of&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * different means:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 1) Registering new native modules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 2) Registering new JS modules that may be accessed from native modules or from other parts of the&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * native code (requiring JS modules from the package doesn&#39;t mean it will automatically be included&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * as a part of the JS bundle, so there should be a corresponding piece of code on JS side that will&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * require implementation of that JS module so that it gets bundled)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 3) Registering custom native views (view managers) and custom event types&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 4) Registering natively packaged assets/resources (e.g. images) exposed to JS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * TODO(6788500, 6788507): Implement support for adding custom views, events and resources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReactPackage&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; reactContext react application context that can be used to create modules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; list of native modules to register with the newly created catalyst instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;List&amp;lt;NativeModule&amp;gt; &lt;span class=&quot;title&quot;&gt;createNativeModules&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ReactApplicationContext reactContext)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; list of JS modules to register with the newly created catalyst instance.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * IMPORTANT: Note that only modules that needs to be accessible from the native code should be&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * listed here. Also listing a native module here doesn&#39;t imply that the JS implementation of it&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * will be automatically included in the JS bundle.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  List&amp;lt;Class&amp;lt;? extends JavaScriptModule&amp;gt;&amp;gt; createJSModules();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; a list of view managers that should be registered with &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; UIManagerModule&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;List&amp;lt;ViewManager&amp;gt; &lt;span class=&quot;title&quot;&gt;createViewManagers&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ReactApplicationContext reactContext)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;LinearGradientPackage类主要实现了createViewManagers方法，返回了一个LinearGradientManager实例，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LinearGradientPackage&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReactPackage&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;NativeModule&amp;gt; &lt;span class=&quot;title&quot;&gt;createNativeModules&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ReactApplicationContext reactContext)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Collections.emptyList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;Class&amp;lt;? extends JavaScriptModule&amp;gt;&amp;gt; createJSModules() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Collections.emptyList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;ViewManager&amp;gt; &lt;span class=&quot;title&quot;&gt;createViewManagers&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ReactApplicationContext reactContext)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Arrays.&amp;lt;ViewManager&amp;gt;asList(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinearGradientManager());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面看LinearGradientManager类，包含了一个LinearGradientView实例，LinearGradientView是渐变View的具体实现，通过@ReactProp注解可以在js层设置渐变View的一些属性，例如渐变颜色，渐变开始和结束位置等的。代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LinearGradientManager&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SimpleViewManager&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;LinearGradientView&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String REACT_CLASS = &lt;span class=&quot;string&quot;&gt;&quot;BVLinearGradient&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String PROP_COLORS = &lt;span class=&quot;string&quot;&gt;&quot;colors&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String PROP_LOCATIONS = &lt;span class=&quot;string&quot;&gt;&quot;locations&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String PROP_START_POS = &lt;span class=&quot;string&quot;&gt;&quot;start&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String PROP_END_POS = &lt;span class=&quot;string&quot;&gt;&quot;end&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String PROP_BORDER_RADIUS = &lt;span class=&quot;string&quot;&gt;&quot;borderRadius&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; REACT_CLASS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; LinearGradientView &lt;span class=&quot;title&quot;&gt;createViewInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ThemedReactContext context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinearGradientView(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@ReactProp&lt;/span&gt;(name=PROP_COLORS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setColors&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LinearGradientView gradientView, ReadableArray colors)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gradientView.setColors(colors);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@ReactProp&lt;/span&gt;(name=PROP_LOCATIONS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setLocations&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LinearGradientView gradientView, ReadableArray locations)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gradientView.setLocations(locations);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@ReactProp&lt;/span&gt;(name=PROP_START_POS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setStartPosition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LinearGradientView gradientView, ReadableArray startPos)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gradientView.setStartPosition(startPos);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@ReactProp&lt;/span&gt;(name=PROP_END_POS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setEndPosition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LinearGradientView gradientView, ReadableArray endPos)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gradientView.setEndPosition(endPos);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// temporary solution until following issue is resolved:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// https://github.com/facebook/react-native/issues/3198&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@ReactProp&lt;/span&gt;(name=PROP_BORDER_RADIUS, defaultFloat = &lt;span class=&quot;number&quot;&gt;0f&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setBorderRadius&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LinearGradientView gradientView, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; borderRadius)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gradientView.setBorderRadius(PixelUtil.toPixelFromDIP(borderRadius));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;CodePush-热更新技术介绍&quot;&gt;&lt;a href=&quot;#CodePush-热更新技术介绍&quot; class=&quot;headerlink&quot; title=&quot;CodePush 热更新技术介绍&quot;&gt;&lt;/a&gt;CodePush 热更新技术介绍&lt;/h2&gt;&lt;p&gt;f8app使用了CodePush技术热更新App，可以先看下微软官方的文档&lt;a href=&quot;http://microsoft.github.io/code-push/docs/react-native.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native Client SDK&lt;/a&gt;。&lt;br&gt;CodePush提供了对React Native App的热更新能力，目前只能对js bundle进行热更新，如果原生代码修改了是不能热更新的，只能通过重新安装App的方式升级。&lt;br&gt;CodePush的一个问题是是对React Native版本的兼容性，由于React Native版本更新很快，CodePush是由微软而不是Facebook维护的，所以对React Native0.18以前的版本支持有各种兼容问题，具体参考&lt;a href=&quot;http://microsoft.github.io/code-push/docs/react-native.html#link-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;。&lt;br&gt;CodePush的具体配置可以参考&lt;a href=&quot;http://bbs.reactnative.cn/topic/725/code-push-%E7%83%AD%E6%9B%B4%E6%96%B0%E4%BD%BF%E7%94%A8%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E%E5%92%8C%E6%95%99%E7%A8%8B/2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;,配置需要注意的事项还是挺多的，我参考这篇文章配置成功了，本文不做详细介绍。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;本文分析了f8app android代码结构，以react-native-linear-gradient插件为例子分析了React Native插件的结构，介绍了CodePush热更新技术，通过本文可以对f8app有比较初步的认识。&lt;br&gt;下篇文章将分析React Native js代码，这块是f8app的核心实现，代码量比较大。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;近期开始研究Facebook f8app项目，目标是理解Facebook官方React Native f8app的整体技术架构，给公司目前几个的React Native项目开发提供官方经验借鉴，并对原生开发和React Native开发进行框架层面的融合。&lt;br&gt;本文分析f8app android代码的结构和技术实现，阅读本文的前提是熟悉Android开发。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>F8App-ReactNative项目源码分析2-服务器端</title>
    <link href="http://offbye.com/2016/05/18/F8App-ReactNative%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF/"/>
    <id>http://offbye.com/2016/05/18/F8App-ReactNative项目源码分析2-服务器端/</id>
    <published>2016-05-18T13:37:25.000Z</published>
    <updated>2016-05-20T15:06:41.000Z</updated>
    
    <content type="html">&lt;p&gt;近期开始研究Facebook f8app项目，目标是理解Facebook官方React Native f8app的整体技术架构，给公司目前几个的React Native项目开发提供官方经验借鉴，并对原生开发和React Native开发进行框架层面的融合。&lt;br&gt;研究了f8app的项目结构后，发现f8app服务器端的代码比较少，并且弄清楚数据模型和接口协议，对于后面理解客户端的实现有帮助，所以先分析服务器端。第二篇文章会详细分析f8app服务端的技术实现，并进行一些修改实验。f8app服务器端是基于Node.js,Express,Parse和GraphQL实现的，数据存储是MongoDB NoSql数据库。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;安装推荐开发工具nuclide&quot;&gt;&lt;a href=&quot;#安装推荐开发工具nuclide&quot; class=&quot;headerlink&quot; title=&quot;安装推荐开发工具nuclide&quot;&gt;&lt;/a&gt;安装推荐开发工具nuclide&lt;/h2&gt;&lt;p&gt;我们一般使用Atom进行js开发，首先安装facebook推荐的开发工具nuclide。Mac和Linux下的安装命令如下，暂不支持windows。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apm install nuclide&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;F8app工程结构&quot;&gt;&lt;a href=&quot;#F8app工程结构&quot; class=&quot;headerlink&quot; title=&quot;F8app工程结构&quot;&gt;&lt;/a&gt;F8app工程结构&lt;/h2&gt;&lt;p&gt;下面先用&lt;code&gt;tree -L 2&lt;/code&gt; 命令看下目录结构,只显示二级目录&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├── LICENSE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── android  安卓项目目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── build.gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── gradle.properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── gradlew&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── gradlew.bat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── settings.gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── index.android.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── index.ios.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── ios   iOS项目目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── Default-568h@2x.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8Scrolling.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8Scrolling.m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8v2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8v2.xcodeproj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8v2.xcworkspace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8v2Tests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── PodFile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── Podfile.lock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── Pods&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── Settings.bundle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── Splash@2x.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── js    React native js源代码目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8App.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── F8Navigator.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── FacebookSDK.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── Playground.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── PushNotificationsController.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── actions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── common&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── env.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── filter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── flow-lib.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── login&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── rating&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── reducers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── setup.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── store&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── tabs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── logs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── node_modules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       下面有900多个js模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── npm-shrinkwrap.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── package.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── scripts   一些脚本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── import-data-from-parse.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── optimize-images.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── store-ip.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── server  服务器端目录，基于Parse和GraphiQL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── cloud&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── cloud.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ├── schema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    └── server.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;服务器端技术介绍&quot;&gt;&lt;a href=&quot;#服务器端技术介绍&quot; class=&quot;headerlink&quot; title=&quot;服务器端技术介绍&quot;&gt;&lt;/a&gt;服务器端技术介绍&lt;/h2&gt;&lt;p&gt;f8app的服务器代码都在server目录下，由于使用了Node.js,Express,Parse，GraphQL等先进框架，代码量比较小,一共只有10个js文件，996行js代码。下面先介绍下f8app服务器端使用的技术，Node.js和Express这类常见技术就不介绍了。&lt;br&gt;服务器端是基于Facebook的Parse云平台，Parse服务将于January 28, 2017停止服务，现在官方提供了迁移指南。&lt;br&gt;现在Parse Server已经开源了，git地址是&lt;a href=&quot;https://github.com/ParsePlatform/parse-server&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;parse-server&lt;/a&gt;,开源Parse Server是基于node.js和Express框架的，支持的数据库是MongoDB和MongoRocks。&lt;br&gt;&lt;code&gt;script/import-data-from-parse.js&lt;/code&gt;实现了从&lt;a href=&quot;https://api.parse.com/1/classes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://api.parse.com/1/classes/&lt;/a&gt; 导入数据到本地MongoDB数据库的功能，通过&lt;code&gt;npm run import-data&lt;/code&gt; 可以导入数据。&lt;/p&gt;
&lt;h2 id=&quot;MongoRocks-What-and-Why&quot;&gt;&lt;a href=&quot;#MongoRocks-What-and-Why&quot; class=&quot;headerlink&quot; title=&quot;MongoRocks: What and Why?&quot;&gt;&lt;/a&gt;MongoRocks: What and Why?&lt;/h2&gt;&lt;p&gt;MongoRocks是Facebook在2015年开发的基于RocksDB的MongoDB存储引擎实现，一般情况下Parse应用都应该用MongoRocks。&lt;br&gt;MongoDB3.0允许用户替换默认的default memory mapped (MMAP) 存储引擎。MongoRocks比MMAP存储引擎在性能方面有很多好处，&lt;br&gt;MongoRocks更多介绍可以参考&lt;a href=&quot;https://github.com/ParsePlatform/parse-server/wiki/MongoRocks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MongoRocks链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Parse-Server简单介绍&quot;&gt;&lt;a href=&quot;#Parse-Server简单介绍&quot; class=&quot;headerlink&quot; title=&quot;Parse Server简单介绍&quot;&gt;&lt;/a&gt;Parse Server简单介绍&lt;/h2&gt;&lt;p&gt;Parse 的愿景是让开发者摆脱服务器，随心所欲地开发各种移动应用程序。对于比较复杂的应用程序，开发者有时需要不在移动设备上运行的逻辑。Cloud Code 正好可以实现这一目标。&lt;br&gt;由于f8app已经带了Parse Server，所以我就不需要用npm安装了，直接在f8app目录下运行npm start，测试下添加数据&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -X POST \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-H &amp;quot;X-Parse-Application-Id: oss-f8-app-2016&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-H &amp;quot;Content-Type: application/json&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-d &amp;apos;&amp;#123;&amp;quot;score&amp;quot;:1337,&amp;quot;playerName&amp;quot;:&amp;quot;Sean Plott&amp;quot;,&amp;quot;cheatMode&amp;quot;:false&amp;#125;&amp;apos; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http://localhost:8080/parse/classes/GameScore&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在终端运行上面的命令后,服务端返回 &lt;code&gt;{&amp;quot;objectId&amp;quot;:&amp;quot;S8mgRPVgwU&amp;quot;,&amp;quot;createdAt&amp;quot;:&amp;quot;2016-05-17T08:31:10.802Z&amp;quot;}&lt;/code&gt; 表示添加成功&lt;br&gt;在浏览器&lt;a href=&quot;http://localhost:8080/dashboard/apps/F8-App-2016/browser/GameScore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;,可以看到刚才添加了一条Game score数据。&lt;/p&gt;
&lt;p&gt;在终端运行下面命令可以查询新添加的那条数据&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -X GET \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -H &amp;quot;X-Parse-Application-Id: oss-f8-app-2016&amp;quot; \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; http://localhost:8080/parse/classes/GameScore/S8mgRPVgwU&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回结果 &lt;code&gt;{&amp;quot;objectId&amp;quot;:&amp;quot;S8mgRPVgwU&amp;quot;,&amp;quot;score&amp;quot;:1337,&amp;quot;playerName&amp;quot;:&amp;quot;Sean Plott&amp;quot;,&amp;quot;cheatMode&amp;quot;:false,&amp;quot;updatedAt&amp;quot;:&amp;quot;2016-05-17T08:31:10.802Z&amp;quot;&lt;/code&gt;&lt;br&gt;Parse提供各种语言的SDK，包括Android，iOS，js等，可以很方便的在移动端使用。&lt;/p&gt;
&lt;h2 id=&quot;Relay和GraphQL&quot;&gt;&lt;a href=&quot;#Relay和GraphQL&quot; class=&quot;headerlink&quot; title=&quot;Relay和GraphQL&quot;&gt;&lt;/a&gt;Relay和GraphQL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/relay/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Relay&lt;/a&gt; 是 app 中的一个数据框架，GraphQL 是 Relay 用来做数据表示的查询语言。GraphQL 同时还有一个 npm 包，可在服务器上运行，提供可以和 Relay 交互的数据源.&lt;/p&gt;
&lt;p&gt;Relay 不是从 Flux 架构分化来的，它只和 GraphQL 有关。这也就是说，这和 Redux 的模型有着巨大的区别。&lt;/p&gt;
&lt;p&gt;在 Relay + GraphQL 的模型中，每个组件指定自己需要的数据。Relay 调用数据，数据更新时，提供给组件最新的数据，并在客户端做缓存。app 需要更新数据时，在 Action 中创建一个 GraphQL 变更，这和 Redux 类似。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/graphql&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GraphQL&lt;/a&gt;是Facebook开发的一个针对描述复杂数据模型需求的一个数据查询语言标准，目前是工作草案。可以使用多种语言实现，目前Facebook提供了node.js版本的参考实现&lt;a href=&quot;https://github.com/graphql/graphql-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GraphQL.js.&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;服务器端代码分析&quot;&gt;&lt;a href=&quot;#服务器端代码分析&quot; class=&quot;headerlink&quot; title=&quot;服务器端代码分析&quot;&gt;&lt;/a&gt;服务器端代码分析&lt;/h2&gt;&lt;p&gt;server.js是服务器的入口类，基于Express框架默认在8080端口提供了/parse,/dashboard,/graphql三个url入口，根目录默认跳转到/graphql。&lt;br&gt;下面是/parse url入口的代码，很简单，直接new ParseServer，把相关的参数传进去，mongodb数据库地址DATABASE_URI可以取环境变量的值&lt;code&gt;const DATABASE_URI = process.env.DATABASE_URI || &amp;#39;mongodb://localhost:27017/dev&amp;#39;;&lt;/code&gt; ，其它的参数也都可以直接在环境变量里面设置，通过export XXX=”xxx”即可修改。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server.use(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;/parse&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ParseServer(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    databaseURI: DATABASE_URI,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cloud: path.resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;cloud.js&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appId: APP_ID,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    masterKey: MASTER_KEY,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fileKey: &lt;span class=&quot;string&quot;&gt;&#39;f33fc1a9-9ba9-4589-95ca-9976c0d52cd5&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    serverURL: &lt;span class=&quot;string&quot;&gt;`http://&lt;span class=&quot;subst&quot;&gt;$&amp;#123;SERVER_HOST&amp;#125;&lt;/span&gt;:&lt;span class=&quot;subst&quot;&gt;$&amp;#123;SERVER_PORT&amp;#125;&lt;/span&gt;/parse`&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;cloud.js很简单，只是引用了cloud目录下文件，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./cloud/friends&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./cloud/surveys&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./cloud/tests&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;cloud/friends.js 提供通过OAuth在Facebook登录后，获取好友和日程的功能。&lt;/p&gt;
&lt;p&gt;/dashboard是ParseDashboard的入口，很简单不说了，就是Parse的Web管理控制台，通过&lt;a href=&quot;http://localhost:8080/dashboard&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8080/dashboard&lt;/a&gt; 可以访问,对Mongodb中数据进行管理，操作很方便。&lt;/p&gt;
&lt;p&gt;/graphql是通过express-graphql插件实现的一个graphql入口，前端UI是通过graphiql.js插件实现的。graphql这块占代码量比较大，schema目录下的文件都是和graphql相关的。&lt;br&gt;&lt;a href=&quot;https://github.com/graphql/graphql-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GraphQL.js.&lt;/a&gt; 提供2个主要能力：构建type schema; 根据type schema类型提供查询能力。&lt;br&gt;schema.js是graphql查询的入口，只支持查询schedule，node（接口类型，只有id），viewer，这点可以从下面的代码看出来，只指定了F8QueryType。我们在浏览器graphql控制台&lt;a href=&quot;http://localhost:8080/graphql&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8080/graphql&lt;/a&gt; 里面也只能做schedule的查询，否则会提示错误，这个控制台还是很智能的，支持查询代码提示。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Schema = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GraphQLSchema(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  query: F8QueryType,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mutation: F8MutationType,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;F8QueryType 定义如下:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; F8QueryType = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GraphQLObjectType(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &lt;span class=&quot;string&quot;&gt;&#39;Query&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fields: () =&amp;gt; (&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    node: nodeField,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    viewer: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      type: F8UserType,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      resolve: (rootValue) =&amp;gt; rootValue, &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; Authenticate user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    schedule: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      type: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GraphQLList(F8SessionType),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      description: &lt;span class=&quot;string&quot;&gt;&#39;F8 agenda&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      resolve: (user, args) =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Parse.Query(Session)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .ascending(&lt;span class=&quot;string&quot;&gt;&#39;startTime&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .find(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;修改下试试，让它能支持查询演讲者，在schedule:{这行上面加入下面代码：
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;speaker: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  type: &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; GraphQLList(F8SpeakerType),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  resolve: (speaker, args) =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Parse.Query(Speaker)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .find(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;在graphql控制台输入查询条件
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;speaker&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;   可以查到所有演讲者的列表。&lt;br&gt;schema.graphql直观的展示了全部的type scheme查询类型，可以看到有interface和type 2种定义方法，interface其实就是类似Java里面的接口，type可以实现interface。Node是interface，包含一个主键id，其它很多类型都实现了Node，例如type Speaker implements Node。通过这个文件我们可以轻松地理解整个服务器的数据结构，还是很清晰的。graphiql.js控制台第一次访问会请求schema.json，用于查询框智能语法提示。&lt;br&gt;updateSchema.js可以重新生成schema.graphql和schema.json。在f8app目录下运行&lt;code&gt;npm run  update-schema&lt;/code&gt; 命令可以重新生成这2个文件。&lt;br&gt;按照上面的做法修改文件后运行命令，可以发现 schema.graphql多了一行 &lt;code&gt;speaker: [Speaker]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;babelRelayPlugin.js代码很少，是提供scheme数据给Relay的。&lt;br&gt;具体可以参考&lt;a href=&quot;https://facebook.github.io/relay/docs/guides-babel-plugin.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;babel-relay-plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文介绍了f8app的项目架构，分析了f8app服务器端的技术实现，整个数据流是Parse Cloud 通过脚本导入-&amp;gt; MongoDB -&amp;gt; ParseServer -&amp;gt; GraphQL -&amp;gt; Redux -&amp;gt; ReactNative，用到了Express，Parse Server，Parse dashboard，GraphQL.js，GraphiQL.js， Ralay等js模块，代码量比较小,但技术栈挺复杂的。&lt;/p&gt;
&lt;p&gt;下篇文章分析React Native Android端的技术实现。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;近期开始研究Facebook f8app项目，目标是理解Facebook官方React Native f8app的整体技术架构，给公司目前几个的React Native项目开发提供官方经验借鉴，并对原生开发和React Native开发进行框架层面的融合。&lt;br&gt;研究了f8app的项目结构后，发现f8app服务器端的代码比较少，并且弄清楚数据模型和接口协议，对于后面理解客户端的实现有帮助，所以先分析服务器端。第二篇文章会详细分析f8app服务端的技术实现，并进行一些修改实验。f8app服务器端是基于Node.js,Express,Parse和GraphQL实现的，数据存储是MongoDB NoSql数据库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="http://offbye.com/tags/ReactNative/"/>
    
      <category term="f8app" scheme="http://offbye.com/tags/f8app/"/>
    
  </entry>
  
  <entry>
    <title>F8App-ReactNative项目源码分析1-初体验</title>
    <link href="http://offbye.com/2016/05/17/F8App-ReactNative%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901-%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://offbye.com/2016/05/17/F8App-ReactNative项目源码分析1-初体验/</id>
    <published>2016-05-17T13:15:46.000Z</published>
    <updated>2016-05-20T15:05:46.000Z</updated>
    
    <content type="html">&lt;p&gt;近期开始研究Facebook f8app项目，目标是理解Facebook官方React Native f8app的整体技术架构，给公司目前几个的React Native项目开发提供官方经验借鉴，并对原生开发和React Native开发进行框架层面的融合。&lt;br&gt;我目前的技术情况是熟悉Android，Swift iOS，Node.js，MongoDB和JavaScript移动端开发，了解Objective C,React.js和React Native,但缺少实际开发经验，对Parse，GraphQL只是听说过。所以只能一步一步折腾了。本文将介绍f8app的实际上手经验，如何把f8app在Mac上run起来。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;首先是阅读秋百万的&lt;a href=&quot;http://f8-app.liaohuqiu.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;构建 F8 App / React Native 开发指南&lt;/a&gt; 对项目有个整体了解。&lt;br&gt;然后到git上clone代码按说明运行起来，这一步遇到了坑，原因是官方的安装过程有错误，少了react-native start这个命令。&lt;/p&gt;
&lt;p&gt;iOS启动后会报错，运行 react-native start就可以了&lt;br&gt;  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2016-05-17 11:34:12.357 [fatal][tid:main] Cannot find entry file index.ios.js in any of the roots: [&amp;quot;/Users/zhangxitao/work/github/f8app&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;项目依赖-Requirements&quot;&gt;&lt;a href=&quot;#项目依赖-Requirements&quot; class=&quot;headerlink&quot; title=&quot;项目依赖 Requirements&quot;&gt;&lt;/a&gt;项目依赖 Requirements&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react-native/docs/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native&lt;/a&gt; (follow iOS and Android guides)&lt;ul&gt;
&lt;li&gt;Xcode 7.3 +&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cocoapods.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CocoaPods&lt;/a&gt; (only for iOS)&lt;ul&gt;
&lt;li&gt;Version 1.0+ recommended (&lt;code&gt;gem install cocoapods --pre&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mongodb.org/downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MongoDB&lt;/a&gt; (needed to run Parse Server locally)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;修改后的安装过程&quot;&gt;&lt;a href=&quot;#修改后的安装过程&quot; class=&quot;headerlink&quot; title=&quot;修改后的安装过程&quot;&gt;&lt;/a&gt;修改后的安装过程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Clone the repo&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git clone https://github.com/fbsamples/f8app.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cd f8app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Install dependencies&lt;/strong&gt; (npm v3+):&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ (cd ios; pod install)        # only for iOS version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make sure MongoDB is running:&lt;/strong&gt;&lt;br&gt;先下载mongodb或直接通过&lt;code&gt;brew install mongodb&lt;/code&gt; 命令安装。Mongodb不熟悉的需要先学习下mongodb的常用命令，和mysql有些类似。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ lsof -iTCP:27017 -sTCP:LISTEN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$  mongod   --dbpath  YOURDATAPATH/mongodata/ &amp;amp;  #启动mongodb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;NOTE: if installed with &lt;a href=&quot;http://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew&lt;/a&gt; run &lt;code&gt;brew info mongo&lt;/code&gt; and&lt;br&gt;check out the Caveats section.&lt;/p&gt;
&lt;p&gt;If you prefer to use an external MongoDB server, set &lt;code&gt;DATABASE_URI&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ export DATABASE_URI=mongodb://example-mongo-hosting.com:1337/my-awesome-database&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Start Parse/GraphQL servers:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ react-native start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Import sample data&lt;/strong&gt; (the local Parse Server should be running):  并验证一下数据是否导入正确。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm run import-data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mongo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MongoDB shell &lt;span class=&quot;symbol&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2.6&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;connecting &lt;span class=&quot;symbol&quot;&gt;to:&lt;/span&gt; test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; show databases&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;admin  (empty)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dev    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;8GB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;local  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;07&lt;/span&gt;8GB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; use dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switched to db dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; show collections&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Agenda&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FAQ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Maps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Notification&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Speakers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Survey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_Installation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_SCHEMA&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;system.indexes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; db.FAQ.find()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#会查到很多数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Make sure everything works by visiting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parse Dashboard: &lt;a href=&quot;http://localhost:8080/dashboard&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8080/dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Graph&lt;em&gt;i&lt;/em&gt;QL: &lt;a href=&quot;http://localhost:8080/graphql?query=query+%7B%0A++schedule+%7B%0A++++title%0A++++speakers+%7B%0A++++++name%0A++++++title%0A++++%7D%0A++++location+%7B%0A++++++name%0A++++%7D%0A++%7D%0A%7D&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8080/graphql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Running on Android&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ react-native run-android&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ adb reverse tcp:8081 tcp:8081   # required to ensure the Android app can&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ adb reverse tcp:8080 tcp:8080   # access the Packager and GraphQL server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Running on iOS:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ react-native run-ios&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;实际运行效果&quot;&gt;&lt;a href=&quot;#实际运行效果&quot; class=&quot;headerlink&quot; title=&quot;实际运行效果&quot;&gt;&lt;/a&gt;实际运行效果&lt;/h2&gt;&lt;p&gt;这样安卓和iOS模拟器应该都跑起来了。实际效果如下：&lt;br&gt;&lt;img src=&quot;http://o79096vir.bkt.clouddn.com/static/images/f8app/f8app3.png?imageView2/2/w/1000&quot; alt=&quot;f8app运行效果&quot;&gt;&lt;/p&gt;
&lt;p&gt;下篇文章开始分析f8app的服务器端结构。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;近期开始研究Facebook f8app项目，目标是理解Facebook官方React Native f8app的整体技术架构，给公司目前几个的React Native项目开发提供官方经验借鉴，并对原生开发和React Native开发进行框架层面的融合。&lt;br&gt;我目前的技术情况是熟悉Android，Swift iOS，Node.js，MongoDB和JavaScript移动端开发，了解Objective C,React.js和React Native,但缺少实际开发经验，对Parse，GraphQL只是听说过。所以只能一步一步折腾了。本文将介绍f8app的实际上手经验，如何把f8app在Mac上run起来。&lt;br&gt;
    
    </summary>
    
    
      <category term="F8App" scheme="http://offbye.com/tags/F8App/"/>
    
      <category term="ReactNative" scheme="http://offbye.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>CTCC2016中国云计算技术大会参会感想</title>
    <link href="http://offbye.com/2016/05/16/CTCC2016%E4%B8%AD%E5%9B%BD%E4%BA%91%E8%AE%A1%E7%AE%97%E6%8A%80%E6%9C%AF%E5%A4%A7%E4%BC%9A%E5%8F%82%E4%BC%9A%E6%84%9F%E6%83%B3/"/>
    <id>http://offbye.com/2016/05/16/CTCC2016中国云计算技术大会参会感想/</id>
    <published>2016-05-16T01:41:05.000Z</published>
    <updated>2016-05-16T01:58:40.000Z</updated>
    
    <content type="html">&lt;p&gt;上个周末有幸参加了中国云计算技术大会，感谢CSDN组织这场规模和层次都很高的技术盛会，更感谢CSDN提供的博客专家赠票。在回南京的高铁上趁热先把参会感想写了，过几天再给公司的小伙伴分享。&lt;/p&gt;
&lt;p&gt;参加这次大会最直观的印象是云计算现在已经发展到了一个立等可用的程度。青云的可视化在线网络编排系统让人印象深刻，只需要通过鼠标拖曳，就可以在几分钟内完成一个包含2台云主机，网络负载均衡器和nat转发的私有云系统。青云在现场进行了云网络编排比赛活动。青云主机和带宽费用比阿里云要高一点。&lt;/p&gt;
&lt;p&gt;周五的全体大会规模很大，演讲者都是大公司云计算部门的老大，演讲都很精彩，可以了解很多大公司在云计算方面的最新发展情况。目前云计算在各大公司都已经有了大规模的实际应用，并开始对外提供服务。&lt;br&gt;周六我主要参加了的container峰会，因为最近公司在准备用docker。感觉在容器化技术领域Docker已经成了主角，由于其轻量化的特点，docker已经在业界广泛使用。与普遍认为的观念不同，docker并不是虚拟机的替代品，而是进程的替代品。演讲中介绍对docker的最佳实践是无状态和不可变，即不要修改docker镜象的配置，也不要在docker里面存储数据。多数演讲更关注docker相关的网络编排方面的框架和工具，并介绍很多好的实践和经验。&lt;br&gt;周日的演讲包括spark峰会，Openstack峰会和Amazon AMS峰会，我只参加了Spark峰会，感觉人特别多，座位都没有了，很多人站着听，还在记笔记，好勤奋的感觉，看来现在Spark很热门，已经是大数据分析的事实标准了。我在spark方面没有实际经验，仅限于了解，因此不好对演讲内容做评论，但感觉有些讲师的演讲技巧不够好。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      上个周末有幸参加了中国云计算技术大会，趁热先把参会感想写了
    
    </summary>
    
    
      <category term="云计算" scheme="http://offbye.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="CTCC2016" scheme="http://offbye.com/tags/CTCC2016/"/>
    
      <category term="docker" scheme="http://offbye.com/tags/docker/"/>
    
      <category term="spark" scheme="http://offbye.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>YAML文件语法简介</title>
    <link href="http://offbye.com/2016/05/12/YAML%E6%96%87%E4%BB%B6%E8%AF%AD%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>http://offbye.com/2016/05/12/YAML文件语法简介/</id>
    <published>2016-05-12T07:46:53.000Z</published>
    <updated>2016-05-12T16:23:41.000Z</updated>
    
    <content type="html">&lt;p&gt;YAML是一种利于人们读写的数据格式. 现在很多系统例如Spring,Ansible,RoR等都支持YAML配置文件，YAML由于其良好的可读性，越来月流行。此外在大多数变成语言中有使用 YAML 的库.&lt;/p&gt;
&lt;p&gt;这个页面提供一个正确的 YAML 语法的基本概述, 它被用来描述一个 playbooks(我们的配置管理语言).&lt;/p&gt;
&lt;p&gt;#基本的YAML&lt;br&gt;对于 Ansible, 每一个 YAML 文件都是从一个列表开始. 列表中的每一项都是一个键值对, 通常它们被称为一个 “哈希” 或 “字典”. 所以, 我们需要知道如何在 YAML 中编写列表和字典.&lt;/p&gt;
&lt;p&gt;YAML 还有一个小的怪癖. 所有的 YAML 文件(无论和 Ansible 有没有关系)开始行都应该是 —. 这是 YAML 格式的一部分, 表明一个文件的开始.&lt;/p&gt;
&lt;p&gt;列表中的所有成员都开始于相同的缩进级别, 并且使用一个 “- “ 作为开头(一个横杠和一个空格):&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;一个美味水果的列表&quot;&gt;&lt;a href=&quot;#一个美味水果的列表&quot; class=&quot;headerlink&quot; title=&quot;一个美味水果的列表&quot;&gt;&lt;/a&gt;一个美味水果的列表&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Orange&lt;/li&gt;
&lt;li&gt;Strawberry&lt;/li&gt;
&lt;li&gt;Mango&lt;br&gt;一个字典是由一个简单的 键: 值 的形式组成(这个冒号后面必须是一个空格):&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 一位职工的记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name: Example Developer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;job: Developer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;skill: Elite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;字典也可以使用缩进形式来表示, 如果你喜欢这样的话:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 一位职工的记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;name: Example Developer, job: Developer, skill: Elite&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Ansible并不是太多的使用这种格式, 但是你可以通过以下格式来指定一个布尔值(true/fase):&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create_key: yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;needs_agent: no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;knows_oop: True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;likes_emacs: TRUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uses_cvs: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;让我们把目前所学到的 YAML 例子组合在一起. 这些在 Ansible 中什么也干不了, 但这些格式将会给你感觉:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 一位职工记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name: Example Developer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;job: Developer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;skill: Elite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;employed: True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foods:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - Apple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - Orange&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - Strawberry&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - Mango&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;languages:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ruby: Elite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    python: Elite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dotnet: Lame&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这就是你开始编写 Ansible playbooks 所需要知道的所有 YAML 语法.&lt;/p&gt;
&lt;p&gt;Gotchas&lt;br&gt;尽管 YAML 通常是友好的, 但是下面将会导致一个 YAML 语法错误:&lt;/p&gt;
&lt;p&gt;foo: somebody said I should put a colon here: so I did&lt;br&gt;你需要使用引号来包裹任何包含冒号的哈希值, 像这样:&lt;/p&gt;
&lt;p&gt;foo: “somebody said I should put a colon here: so I did”&lt;br&gt;然后这个冒号将会被结尾.&lt;/p&gt;
&lt;p&gt;此外, Ansible 使用 “” 来引用变量. 如果一个值以 “{” 开头, YAML 将认为它是一个字典, 所以我们必须引用它, 像这样:&lt;/p&gt;
&lt;p&gt;foo: ““&lt;/p&gt;
</content>
    
    <summary type="html">
    
      YAML是一种利于人们读写的数据格式. 现在很多系统例如Spring等都支持YAML配置文件，YAML由于其良好的可读性，越来月流行。此外在大多数变成语言中有使用 YAML 的库. 
    
    </summary>
    
    
      <category term="YAML" scheme="http://offbye.com/tags/YAML/"/>
    
  </entry>
  
  <entry>
    <title>iOS App沙盒模型文件目录详解Swift版</title>
    <link href="http://offbye.com/2016/05/11/iOS-Sandbox-swift/"/>
    <id>http://offbye.com/2016/05/11/iOS-Sandbox-swift/</id>
    <published>2016-05-11T10:25:25.000Z</published>
    <updated>2016-05-12T16:23:41.000Z</updated>
    
    <content type="html">&lt;p&gt;本文会比较全面的介绍iOS App沙盒模型的文件夹及其使用场景，以及通过Swift取得这些文件夹的方法&lt;/p&gt;
&lt;h1 id=&quot;iOS-中的沙盒机制介绍&quot;&gt;&lt;a href=&quot;#iOS-中的沙盒机制介绍&quot; class=&quot;headerlink&quot; title=&quot;iOS 中的沙盒机制介绍&quot;&gt;&lt;/a&gt;iOS 中的沙盒机制介绍&lt;/h1&gt;&lt;p&gt;iOS 中的沙盒机制（SandBox）是一种安全体系。&lt;br&gt;每个iOS 应用程序都有一个单独的文件系统（存储空间），而且只能在对应的文件系统中进行操作，此区域被称为沙盒。所有的非代码文件都要保存在此，例如属性文件 plist、文本文件、图像、图标、媒体资源等。&lt;/p&gt;
&lt;h1 id=&quot;iPhone沙箱模型的四个文件夹介绍和功能&quot;&gt;&lt;a href=&quot;#iPhone沙箱模型的四个文件夹介绍和功能&quot; class=&quot;headerlink&quot; title=&quot;iPhone沙箱模型的四个文件夹介绍和功能&quot;&gt;&lt;/a&gt;iPhone沙箱模型的四个文件夹介绍和功能&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Documents 目录：您应该将所有de应用程序数据文件写入到这个目录下。这个目录用于存储用户数据或其它应该定期备份的信息。用户自己保存的文件在documents文件里&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AppName.app 目录：这是应用程序的程序包目录，包含应用程序的本身。由于应用程序必须经过签名，所以您在运行时不能对这个目录中的内容进行修改，否则可能会使应用程序无法启动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Library 目录：这个目录下有两个子目录：Caches 和 Preferences&lt;br&gt;Preferences 目录：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好.&lt;br&gt;Caches 目录：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tmp 目录：这个目录用于存放临时文件，保存应用程序再次启动过程中不需要的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;补充1：对于上述描述可以这样举例理解，一个记事本应用，用户写的东西需要保存起来，这些东西是用户自行生成的，则需要放在 Documents 目录里。一个新闻应用，如果需要从服务器下载东西展示给用户看，下载的东西就放在 Library/Caches 目录里。苹果审核对这个要求很严格，主要原因是 iCloud 的同步问题。&lt;br&gt;补充2：如果想知道真机或者模拟器 App 沙盒路径，可通过在项目中执行下述代码打印获取：&lt;/p&gt;
&lt;h1 id=&quot;获取这些目录路径的方法&quot;&gt;&lt;a href=&quot;#获取这些目录路径的方法&quot; class=&quot;headerlink&quot; title=&quot;获取这些目录路径的方法&quot;&gt;&lt;/a&gt;获取这些目录路径的方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;获取Home目录路径的函数：&lt;br&gt;let homeDir = NSHomeDirectory()&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取Documents目录路径的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let paths =  NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.NSDocumentDirectory, NSSearchPathDomainMask.UserDomainMask, true)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let   documentPath = paths[0]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取Caches目录路径的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let paths =  NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.CachesDirectory,NSSearchPathDomainMask.UserDomainMask, true)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let   cachePath = paths[0]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;获取tmp目录路径的方法：&lt;br&gt;let tmpDir = NSTemporaryDirectory();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;获取应用程序程序包中资源文件路径的方法：&lt;br&gt;程序包（NSBundle）&lt;br&gt;iOS 应用都是通过 bundle 进行封装的，可以狭隘地将 bundle 理解为上述沙盒中的 AppName.app 文件。在 Finder 中，会把 bundle 当做一个文件显示从而防止用户误操作导致程序文件损坏，但其实内部是一个目录，包含了图像、媒体资源、编译好的代码、nib 文件等，这个目录称为 main bundle。&lt;br&gt;Cocoa 提供了 NSBundle 类封装了 bundle 操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过NSBundle可以获取各种资源文件，注意在Build Phases - Copy Bundle Rresources下面需要有这个资源文件，有些类型的文件不会自动加在这里&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let path = NSBundle.mainBundle().pathForResource(&amp;quot;20160504182134006&amp;quot;, ofType: &amp;quot;pcm&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码中的mainBundle类方法用于返回一个代表应用程序包的对象。&lt;/p&gt;
&lt;h1 id=&quot;NSFileManager文件管理介绍&quot;&gt;&lt;a href=&quot;#NSFileManager文件管理介绍&quot; class=&quot;headerlink&quot; title=&quot;NSFileManager文件管理介绍&quot;&gt;&lt;/a&gt;NSFileManager文件管理介绍&lt;/h1&gt;&lt;p&gt;使用 FileManager 可以对沙盒中的目录、文件进行操作。&lt;/p&gt;
&lt;p&gt;例子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var fm: NSFileManager = NSFileManager.defaultManager()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if !fm.fileExistsAtPath(self.dataFilePath()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //下面是对该文件进行制定路径的保存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fm.createDirectoryAtPath(self.dataFilePath(), withIntermediateDirectories: true, attributes: nil, error: nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //取得一个目录下得所有文件名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var files: [AnyObject] = fm.subpathsAtPath(self.dataFilePath())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //读取某个文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var data: NSData = fm.contentsAtPath(self.dataFilePath())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var data: NSData = NSData.dataWithContentOfPath(self.dataFilePath())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      本文会比较全面的介绍iOS App沙盒模型的文件夹及其使用场景，以及通过Swift取得这些文件夹的方法。iOS 中的沙盒机制（SandBox）是一种安全体系。每个iOS 应用程序都有一个单独的文件系统（存储空间），而且只能在对应的文件系统中进行操作，此区域被称为沙盒。所有的非代码文件都要保存在此，例如属性文件 plist、文本文件、图像、图标、媒体资源等。
    
    </summary>
    
    
      <category term="Sandbox" scheme="http://offbye.com/tags/Sandbox/"/>
    
      <category term="swift" scheme="http://offbye.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS App沙盒模型文件目录详解Swift版</title>
    <link href="http://offbye.com/2016/05/06/iOS%20App%E6%B2%99%E7%9B%92%E6%A8%A1%E5%9E%8B%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E8%AF%A6%E8%A7%A3Swift%E7%89%88/"/>
    <id>http://offbye.com/2016/05/06/iOS App沙盒模型文件目录详解Swift版/</id>
    <published>2016-05-06T02:16:00.000Z</published>
    <updated>2016-05-12T16:39:59.000Z</updated>
    
    <content type="html">&lt;p&gt;本文会比较全面的介绍iOS App沙盒模型的文件夹及其使用场景，以及通过swift取得这些文件夹的方法&lt;/p&gt;
&lt;p&gt;##iOS 中的沙盒机制介绍&lt;br&gt;iOS 中的沙盒机制（SandBox）是一种安全体系。&lt;br&gt;每个 iOS 应用程序都有一个单独的文件系统（存储空间），而且只能在对应的文件系统中进行操作，此区域被称为沙盒。所有的非代码文件都要保存在此，例如属性文件 plist、文本文件、图像、图标、媒体资源等。&lt;/p&gt;
&lt;p&gt;##iPhone沙箱模型的四个文件夹介绍和功能&lt;/p&gt;
&lt;p&gt;1、Documents 目录：您应该将所有de应用程序数据文件写入到这个目录下。这个目录用于存储用户数据或其它应该定期备份的信息。用户自己保存的文件在documents文件里&lt;br&gt;2、AppName.app 目录：这是应用程序的程序包目录，包含应用程序的本身。由于应用程序必须经过签名，所以您在运行时不能对这个目录中的内容进行修改，否则可能会使应用程序无法启动。&lt;br&gt;3、Library 目录：这个目录下有两个子目录：Caches 和 Preferences&lt;br&gt;Preferences 目录：包含应用程序的偏好设置文件。您不应该直接创建偏好设置文件，而是应该使用NSUserDefaults类来取得和设置应用程序的偏好.&lt;br&gt;Caches 目录：用于存放应用程序专用的支持文件，保存应用程序再次启动过程中需要的信息。&lt;br&gt;4、tmp 目录：这个目录用于存放临时文件，保存应用程序再次启动过程中不需要的信息。&lt;/p&gt;
&lt;p&gt;补充1：对于上述描述可以这样举例理解，一个记事本应用，用户写的东西需要保存起来，这些东西是用户自行生成的，则需要放在 Documents 目录里。一个新闻应用，如果需要从服务器下载东西展示给用户看，下载的东西就放在 Library/Caches 目录里。苹果审核对这个要求很严格，主要原因是 iCloud 的同步问题。&lt;br&gt;补充2：如果想知道真机或者模拟器 App 沙盒路径，可通过在项目中执行下述代码打印获取：&lt;/p&gt;
&lt;p&gt;##获取这些目录路径的方法&lt;br&gt;1，获取Home目录路径的函数：&lt;br&gt; let homeDir = NSHomeDirectory()&lt;br&gt;2，获取Documents目录路径的方法：&lt;br&gt;let paths =  NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.NSDocumentDirectory, NSSearchPathDomainMask.UserDomainMask, true)&lt;br&gt;let   documentPath = paths[0]&lt;/p&gt;
&lt;p&gt;3，获取Caches目录路径的方法：&lt;br&gt;let paths =  NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.CachesDirectory,NSSearchPathDomainMask.UserDomainMask, true)&lt;br&gt;let   cachePath = paths[0]&lt;/p&gt;
&lt;p&gt;4，获取tmp目录路径的方法：&lt;br&gt;let tmpDir = NSTemporaryDirectory();&lt;br&gt;5，获取应用程序程序包中资源文件路径的方法：程序包（NSBundle）&lt;br&gt;iOS 应用都是通过 bundle 进行封装的，可以狭隘地将 bundle 理解为上述沙盒中的 AppName.app 文件。在 Finder 中，会把 bundle 当做一个文件显示从而防止用户误操作导致程序文件损坏，但其实内部是一个目录，包含了图像、媒体资源、编译好的代码、nib 文件等，这个目录称为 main bundle。&lt;br&gt;Cocoa 提供了 NSBundle 类封装了 bundle 操作。&lt;/p&gt;
&lt;p&gt;通过NSBundle可以获取各种资源文件，注意在Build Phases - Copy Bundle Rresources下面需要有这个资源文件，有些类型的文件不会自动加在这里&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let path = NSBundle.mainBundle().pathForResource(&amp;quot;20160504182134006&amp;quot;, ofType: &amp;quot;pcm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码中的mainBundle类方法用于返回一个代表应用程序包的对象。&lt;/p&gt;
&lt;p&gt;##NSFileManager文件管理介绍&lt;br&gt;使用 FileManager 可以对沙盒中的目录、文件进行操作。&lt;/p&gt;
&lt;p&gt;例子：&lt;br&gt;var fm: NSFileManager = NSFileManager.defaultManager()&lt;br&gt;if !fm.fileExistsAtPath(self.dataFilePath()) {&lt;br&gt;    //下面是对该文件进行制定路径的保存&lt;br&gt;    fm.createDirectoryAtPath(self.dataFilePath(), withIntermediateDirectories: true, attributes: nil, error: nil)&lt;br&gt;        //取得一个目录下得所有文件名&lt;br&gt;    var files: [AnyObject] = fm.subpathsAtPath(self.dataFilePath())&lt;br&gt;        //读取某个文件&lt;br&gt;    var data: NSData = fm.contentsAtPath(self.dataFilePath())&lt;br&gt;        //或者&lt;br&gt;    var data: NSData = NSData.dataWithContentOfPath(self.dataFilePath())&lt;br&gt;}&lt;/p&gt;
</content>
    
    <summary type="html">
    
       iOS App沙盒模型文件目录详解Swift版 
    
    </summary>
    
      <category term="ios" scheme="http://offbye.com/categories/ios/"/>
    
      <category term="沙盒" scheme="http://offbye.com/categories/ios/%E6%B2%99%E7%9B%92/"/>
    
      <category term="Swift" scheme="http://offbye.com/categories/ios/%E6%B2%99%E7%9B%92/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift iOS实现把PCM语音转成MP3格式</title>
    <link href="http://offbye.com/2016/05/05/Swift%20iOS%E5%AE%9E%E7%8E%B0%E6%8A%8APCM%E8%AF%AD%E9%9F%B3%E8%BD%AC%E6%88%90MP3%E6%A0%BC%E5%BC%8F/"/>
    <id>http://offbye.com/2016/05/05/Swift iOS实现把PCM语音转成MP3格式/</id>
    <published>2016-05-05T10:46:00.000Z</published>
    <updated>2016-05-12T16:39:59.000Z</updated>
    
    <content type="html">&lt;p&gt;最近折腾了swift的语音录制识别和转码，这块还是比较坑的，由于语音识别的准确度实测大概也就80%左右，所以还是需要上传录音文件啊。&lt;br&gt;首先是用讯飞语音SDK实现语音录制和识别（语音听写），第一个坑是讯飞SDK只录制了PCM格式的文件，这个文件是原始格式，默认比较大，另外播放器支持也不好，因此需要先把它转成mp3，本来考虑使用系统的AudioConverter转aac格式，不过aac好像不能在浏览器上播放。&lt;br&gt;转成mp3需要lame库支持，注意国内网搜到的lame.a库不支持64位，所以现在不能用了。&lt;br&gt;还好已经有人做了这个事情，直接提供了最新编译脚本和编译好的framework库，地址是&lt;a href=&quot;https://github.com/wuqiong/mp3lame-for-iOS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wuqiong/mp3lame-for-iOS&lt;/a&gt;&lt;br&gt;我直接用了上面编译的framework，没有自己去编译，直接把lame.framework拖到工程里。&lt;br&gt;然后需要用oc写个封装类，我不确定这个封装类能不能用swift写，毕竟里面用了很多c的语法，还是用oc桥接一层比较保险。oc封装类如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;AudioWrapper.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;lame/lame.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AudioWrapper&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)audioPCMto&lt;span class=&quot;built_in&quot;&gt;MP3&lt;/span&gt; :(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)audioFileSavePath :(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)mp3FilePath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; read, write;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FILE *pcm = fopen([audioFileSavePath cStringUsingEncoding:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&quot;rb&quot;&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//source 被转换的音频文件位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fseek(pcm, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;, SEEK_CUR);                                   &lt;span class=&quot;comment&quot;&gt;//skip file header&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FILE *mp3 = fopen([mp3FilePath cStringUsingEncoding:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&quot;wb&quot;&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//output 输出生成的Mp3文件位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; PCM_SIZE = &lt;span class=&quot;number&quot;&gt;8192&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;MP3_SIZE&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;8192&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; pcm_buffer[PCM_SIZE*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; mp3_buffer[&lt;span class=&quot;built_in&quot;&gt;MP3_SIZE&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lame_t lame = lame_init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lame_set_in_samplerate(lame, &lt;span class=&quot;number&quot;&gt;11025.0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lame_set_VBR(lame, vbr_default);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lame_init_params(lame);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            read = fread(pcm_buffer, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;), PCM_SIZE, pcm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (read == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                write = lame_encode_flush(lame, mp3_buffer, &lt;span class=&quot;built_in&quot;&gt;MP3_SIZE&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                write = lame_encode_buffer_interleaved(lame, pcm_buffer, read, mp3_buffer, &lt;span class=&quot;built_in&quot;&gt;MP3_SIZE&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fwrite(mp3_buffer, write, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, mp3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (read != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lame_close(lame);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fclose(mp3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fclose(pcm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@catch&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSException&lt;/span&gt; *exception) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,[exception description]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;MP3 converted: %@&quot;&lt;/span&gt;,mp3FilePath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在桥接文件XXX-Bridging-Header.h中加入&lt;/p&gt;
&lt;p&gt;#import “AudioWrapper.h”&lt;br&gt;最后 swift文件的调用如下:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                AudioWrapper.audioPCMtoMP3(path, pathMp3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我觉得在主线程调用容易出问题，就新开了个线程调用，实测没有问题。&lt;/p&gt;
</content>
    
    <summary type="html">
    
       Swift iOS实现把PCM语音转成MP3格式 
    
    </summary>
    
      <category term="swift" scheme="http://offbye.com/categories/swift/"/>
    
      <category term="mp3" scheme="http://offbye.com/categories/swift/mp3/"/>
    
      <category term="lame" scheme="http://offbye.com/categories/swift/mp3/lame/"/>
    
    
  </entry>
  
  <entry>
    <title>RESTFUL API 安全设计</title>
    <link href="http://offbye.com/2016/05/04/RESTFUL%20API%20%E5%AE%89%E5%85%A8%E8%AE%BE%E8%AE%A1/"/>
    <id>http://offbye.com/2016/05/04/RESTFUL API 安全设计/</id>
    <published>2016-05-04T06:22:00.000Z</published>
    <updated>2016-05-12T16:39:59.000Z</updated>
    
    <content type="html">&lt;p&gt;#0x01 REST API 简介&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;REST的全称是REpresentational State Transfer，表示表述性无状态传输，无需session，所以每次请求都得带上身份认证信息。rest是基于http协议的，也是无状态的。只是一种架构方式，所以它的安全特性都需我们自己实现，没有现成的。建议所有的请求都通过https协议发送。RESTful web services 概念的核心就是“资源”。 资源可以用 URI 来表示。客户端使用 HTTP 协议定义的方法来发送请求到这些 URIs，当然可能会导致这些被访问的”资源“状态的改变。HTTP请求对应关系如下：&lt;br&gt;    ==========  =====================  ========================&lt;br&gt;    HTTP 方法   行为                   示例&lt;br&gt;    ==========  =====================  ========================&lt;br&gt;    GET         获取资源的信息         &lt;a href=&quot;http://xx.com/api/orders&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://xx.com/api/orders&lt;/a&gt;&lt;br&gt;    GET         获取某个特定资源的信息 &lt;a href=&quot;http://xx.com/api/orders/123&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://xx.com/api/orders/123&lt;/a&gt;&lt;br&gt;    POST        创建新资源             &lt;a href=&quot;http://xx.com/api/orders&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://xx.com/api/orders&lt;/a&gt;&lt;br&gt;    PUT         更新资源               &lt;a href=&quot;http://xx.com/api/orders/123&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://xx.com/api/orders/123&lt;/a&gt;&lt;br&gt;    DELETE      删除资源               &lt;a href=&quot;http://xx.com/api/orders/123&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://xx.com/api/orders/123&lt;/a&gt;&lt;br&gt;    ==========  ====================== =======================&lt;/p&gt;
&lt;p&gt;对于请求的数据一般用json或者xml形式来表示，推荐使用json。&lt;/p&gt;
&lt;p&gt;#0x02 身份认证&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;身份认证包含很多种，有HTTP Basic，HTTP Digest，API KEY，Oauth，JWK等方式，下面简单讲解下：&lt;/p&gt;
&lt;p&gt;##2.1 HTTP Basic&lt;br&gt;REST由于是无状态的传输，所以每一次请求都得带上身份认证信息，身份认证的方式，身份认证的方式有很多种，第一种便是http basic，这种方式在客户端要求简单，在服务端实现也非常简单，只需简单配置apache等web服务器即可实现，所以对于简单的服务来说还是挺方便的。但是这种方式安全性较低，就是简单的将用户名和密码base64编码放到header中。&lt;br&gt;    base64编码前：Basic admin:admin&lt;br&gt;    base64编码后：Basic YWRtaW46YWRtaW4=&lt;br&gt;    放到Header中：Authorization: Basic YWRtaW46YWRtaW4=&lt;/p&gt;
&lt;p&gt;正是因为是简单的base64编码存储，切记切记在这种方式下一定得注意使用ssl，不然就是裸奔了。&lt;br&gt;在某些产品中也是基于这种类似方式，只是没有使用apache的basic机制，而是自己写了认证框架，原理还是一样的，在一次请求中base64解码Authorization字段，再和认证信息做校验。很显然这种方式有问题，认证信息相当于明文传输，另外也没有防暴力破解功能。&lt;/p&gt;
&lt;p&gt;##2.2 API KEY&lt;br&gt;API Key就是经过用户身份认证之后服务端给客户端分配一个API Key，类似：&lt;a href=&quot;http://example.com/api?key=dfkaj134,一般的处理流程如下：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://example.com/api?key=dfkaj134,一般的处理流程如下：&lt;/a&gt;&lt;br&gt;一个简单的设计示例如下：&lt;br&gt;client端：&lt;br&gt;&lt;img src=&quot;http://static.wooyun.org//drops/20151016/2015101611045213385client.png&quot; alt=&quot;clint端&quot;&gt;&lt;br&gt;server端：&lt;br&gt;&lt;img src=&quot;http://static.wooyun.org//drops/20151016/2015101611045762856server.png&quot; alt=&quot;server端&quot;&gt;&lt;br&gt;client端向服务端注册，服务端给客户端发送响应的api_key以及security_key，注意保存不要泄露，然后客户端根据api_key,secrity_key,timestrap,rest_uri采用hmacsha256算法得到一个hash值sign，构造途中的url发送给服务端。&lt;br&gt;服务端收到该请求后，首先验证api_key,是否存在，存在则获取该api_key的security_key，接着验证timestrap是否超过时间限制，可依据系统成而定，这样就防止了部分重放攻击，途中的rest_api是从url获取的为/rest/v1/interface/eth0,最后计算sign值，完之后和url中的sign值做校验。这样的设计就防止了数据被篡改。&lt;br&gt;通过这种API Key的设计方式加了时间戳防止了部分重放，加了校验，防止了数据被篡改，同时避免了传输用户名和密码，当然了也会有一定的开销。&lt;/p&gt;
&lt;p&gt;##2.3 Oauth1.0a或者Oauth2&lt;br&gt;OAuth协议适用于为外部应用授权访问本站资源的情况。其中的加密机制与HTTP Digest身份认证相比，安全性更高。使用和配置都比较复杂，这里就不涉及了。&lt;/p&gt;
&lt;p&gt;##2.4 JWT&lt;br&gt;JWT 是JSON Web Token，用于发送可通过数字签名和认证的东西，它包含一个紧凑的，URL安全的JSON对象，服务端可通过解析该值来验证是否有操作权限，是否过期等安全性检查。由于其紧凑的特点，可放在url中或者 HTTP Authorization头中，具体的算法就如下图&lt;br&gt;&lt;img src=&quot;http://static.wooyun.org//drops/20151016/2015101611045541381jwt.png&quot; alt=&quot;jwt组成图&quot;&gt;&lt;/p&gt;
&lt;p&gt;#0x03 授权&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;身份认证之后就是授权，根据不同的身份，授予不同的访问权限。比如admin用户，普通用户，auditor用户都是不同的身份。简单的示例：&lt;br&gt;12345678910$roles= &lt;strong&gt;array&lt;/strong&gt;(‘ADMIN’=&amp;gt;&lt;strong&gt;array&lt;/strong&gt;(‘permit’=&amp;gt;&lt;strong&gt;array&lt;/strong&gt;(‘/^((\/system\/(clouds|device)$/‘), // 允许访问哪些URL的正则表达式’deny’=&amp;gt;&lt;strong&gt;array&lt;/strong&gt;(‘/^(\/system\/audit)$/‘) // 禁止访问哪些URL的正则表达式),’AUDIT’=&amp;gt;&lt;strong&gt;array&lt;/strong&gt;(‘permit’=&amp;gt;&lt;strong&gt;array&lt;/strong&gt;(‘/^(\/system\/audit)$/‘),//允许访问的URL正则表达式’deny’=&amp;gt;&lt;strong&gt;array&lt;/strong&gt;(‘/^((\/system\/(clouds|device).*)$/‘)));上述是垂直权限的处理，如果遇到了平行权限的问题，如用户A获取用户B的身份信息或者更改其他用户信息，对于这些敏感数据接口都需要加上对用户的判断，这一步一般都在具体的逻辑实现中实现。&lt;/p&gt;
&lt;p&gt;#0x04 URL过滤&lt;br&gt;在进入逻辑处理之前，加入对URL的参数过滤，如/site/{num}/policy 限定num位置为整数等，如果不是参数则直接返回非法参数，设定一个url清单，不在不在url清单中的请求直接拒绝，这样能防止开发中的api泄露。rest api接口一般会用到GET,POST,PUT,DELETE,未实现的方法则直接返回方法不允许，对于POST，PUT方法的数据采用json格式，并且在进入逻辑前验证是否json，不合法返回json格式错误。&lt;/p&gt;
&lt;p&gt;#0x05 重要功能加密传输&lt;br&gt;第一步推荐SSL加密传输，同时对于系统中重要的功能做加密传输，如证书，一些数据，配置的备份功能，同时还得确保具备相应的权限，这一步会在授权中涉及。&lt;/p&gt;
&lt;p&gt;#0x06 速率限制&lt;br&gt;请求速率限制，根据api_key或者用户来判断某段时间的请求次数，将该数据更新到内存数据库（redis，memcached），达到最大数即不接受该用户的请求，同时这样还可以利用到内存数据库key在特定时间自动过期的特性。在php中可以使用APC，Alternative PHP Cache (APC) 是一个开放自由的PHP opcode 缓存。它的目标是提供一个自由、 开放，和健全的框架用于缓存和优化PHP的中间代码。在返回时设置X-Rate-Limit-Reset:当前时间段剩余秒数，APC的示例代码如下：&lt;br&gt;12345678910111213Route::filter(‘api.limit’, &lt;strong&gt;function&lt;/strong&gt;(){$key= sprintf(‘api:%s’, Auth::user()-&amp;gt;api_key);// Create the key if it doesn’t existCache::add($key, 0, 60);// Increment by 1$count= Cache::increment($key);// Fail if hourly requests exceeded&lt;strong&gt;if&lt;/strong&gt;($count&amp;gt; Config::get(‘api.requests_per_hour’)){App::abort(403, ‘Hourly request limit exceeded’);}});#0x07 错误处理&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;对于非法的，导致系统出错的等请求都进行记录，一些重要的操作，如登录，注册等都通过日志接口输出展示。有一个统一的出错接口，对于400系列和500系列的错误都有相应的错误码和相关消息提示，如401：未授权；403：已经鉴权，但是没有相应权限。如不识别的url:{“result”:”Invalid URL!”},错误的请求参数{“result”:”json format error”},不允许的方法：{“result”:”Method Not Allowed”}，非法参数等。上面所说的都是单状态码，同时还有多状态码，表示部分成功，部分字符非法等。示例如下：&lt;br&gt;    HTTP/1.1 207 Multi-Status&lt;br&gt;    Content-Type: application/json; charset=”UTF-8”&lt;br&gt;    Content-Length: XXXX    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
&amp;quot;OPT_STATUS&amp;quot;: 207
&amp;quot;DATA&amp;quot;: {
    &amp;quot;IP_ADDRESS&amp;quot;: [{
        &amp;quot;INTERFACE&amp;quot;: &amp;quot;eth0&amp;quot;,
        &amp;quot;IP_LIST&amp;quot;:[{
             &amp;quot;IP&amp;quot;: &amp;quot;192.168.1.1&amp;quot;,
             &amp;quot;MASK&amp;quot;: &amp;quot;255.255.0.0&amp;quot;,
&amp;quot;MULTI_STATUS&amp;quot;: 200,
             &amp;quot;MULTI_RESULT&amp;quot;: &amp;quot;created successfully&amp;quot;
        },{
             &amp;quot;IP&amp;quot;: &amp;quot;192.167.1.1&amp;quot;,
             &amp;quot;MASK&amp;quot;: &amp;quot;255.255.0.0&amp;quot;,
&amp;quot;MULTI_STATUS&amp;quot;: 409,
             &amp;quot;MULTI_RESULT&amp;quot;: &amp;quot;invalid parameter&amp;quot;
}]
}]
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;#0x08 重要ID不透明处理&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在系统一些敏感功能上，比如/user/1123 可获取id=1123用户的信息，为了防止字典遍历攻击，可对id进行url62或者uuid处理，这样处理的id是唯一的，并且还是字符安全的。&lt;/p&gt;
&lt;p&gt;#0x09 其他注意事项&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;（1）请求数据，对于POST,DELETE方法中的数据都采用json格式，当然不是说rest架构不支持xml，由于xml太不好解析，对于大部分的应用json已经足够，近一些的趋势也是json越来越流行，并且json格式也不会有xml的一些安全问题，如xxe。使用json格式目前能防止扫描器自动扫描。&lt;br&gt;（2）返回数据统一编码格式，统一返回类型，如Content-Type: application/json; charset=”UTF-8”&lt;br&gt;（3）在逻辑实现中，json解码之后进行参数验证或者转义操作，第一步json格式验证，第二步具体参数验证基本上能防止大部分的注入问题了。&lt;br&gt;（4）在传输过程中，采用SSL保证传输安全。&lt;br&gt;（5）存储安全，重要信息加密存储，如认证信息hash保存。&lt;br&gt;总之，尽量使用SSL。&lt;/p&gt;
</content>
    
    <summary type="html">
    
       RESTFUL API 安全设计 
    
    </summary>
    
      <category term="REST" scheme="http://offbye.com/categories/REST/"/>
    
      <category term="安全" scheme="http://offbye.com/categories/REST/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>关于 Token，你应该知道的十件事</title>
    <link href="http://offbye.com/2016/05/04/%E5%85%B3%E4%BA%8E%20Token%EF%BC%8C%E4%BD%A0%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E5%8D%81%E4%BB%B6%E4%BA%8B/"/>
    <id>http://offbye.com/2016/05/04/关于 Token，你应该知道的十件事/</id>
    <published>2016-05-04T06:16:00.000Z</published>
    <updated>2016-05-12T16:40:00.000Z</updated>
    
    <content type="html">&lt;p&gt;原文是一篇很好的讲述 Token 在 Web 应用中使用的&lt;a href=&quot;https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/#token-storage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章&lt;/a&gt;，而这是我和 &lt;a href=&quot;http://www.specyci.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Special&lt;/a&gt; 合作翻译的译文。&lt;/p&gt;
&lt;p&gt;#1. Token 应该被保存起来（放到 local / session stograge 或者 cookies）&lt;br&gt;在单页应用程序中，有些用户刷新浏览器后会带来一些跟 token 相关的问题。而解决方法很简单：你应该把 token 保存到起来：&lt;a href=&quot;https://github.com/auth0/angular-token-auth/blob/master/auth.client.js#L31&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;放到 session storage, local storage 或者是客户端的 cookie 里&lt;/a&gt;。而浏览器不支持 session storage 时都应该转存到 cookies 里。&lt;br&gt;如果你想“我把 token 保存到 cookie ，不就跟以前没有任何分别？”。可是在这种情况下你只是把 cookie 当作一个储存机制，而不是一种&lt;a href=&quot;http://sitr.us/2011/08/26/cookies-are-bad-for-you.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;验证机制&lt;/a&gt;。（比如说，这个 cookie 不会被 Web 框架用于用户验证，所以没有 XSRF 攻击的危险）。&lt;/p&gt;
&lt;p&gt;#2. Tokens 除了像 cookie 一样有有效期，而且你可以有更多的操作方法&lt;br&gt;Tokens 应该有一个有效期（在 &lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-15#section-4.1.4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSON Web Tokens&lt;/a&gt; 中是作为 exp 属性），否则其他人只要登录过一次就可以永远地通过 API 的验证。Cookies 基于同样的理由也有一个有效期。&lt;br&gt;在 Cookies 的使用中，有不同的选项可以控制 cookie 的生命周期：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. cookies 可以在浏览器关闭后删除（session cookies）；

2. 另外你可以实现服务器端的检查（通常由你使用的 Web 框架完成），还有也可以实现绝对有效期或弹性有效期（sliding window expiration）；

3. Cookies 可以带有有效期地保存起来（浏览器关闭后也不删除）。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而在 tokens 的使用中，一旦 token 过期，只需要重新获取一个。你可以使用一个接口去刷新 token：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 让旧的 token 失效；

2. 检查这个用户是不是还存在，权限是否被取消或者任何对你的程序来说是有必要的；

3. 得到一个更新了有效期的 token。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你甚至可以把 token 原来的发布时间也保存起来，并且强制在两星期后重新登录什么的。&lt;br&gt;    1&lt;br&gt;    2&lt;br&gt;    3&lt;br&gt;    4&lt;br&gt;    5&lt;br&gt;    6&lt;br&gt;    7&lt;br&gt;    8&lt;br&gt;    9&lt;br&gt;    10&lt;br&gt;    11&lt;br&gt;    12&lt;br&gt;    13&lt;br&gt;    14&lt;br&gt;    15&lt;br&gt;    16&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app.post(&amp;apos;/refresh_token&amp;apos;,function(req,res){// verify the existing tokenvarprofile=jwt.verify(req.body.token,secret);// if more than 14 days old, force loginif(profile.original_iat-newDate()&amp;gt;14){// iat == issued atreturnres.send(401);// re-logging}// check if the user still exists or if authorization hasn&amp;apos;t been revokedif(!valid)returnres.send(401);// re-logging// issue a new tokenvarrefreshed_token=jwt.sign(profile,secret,{expiresInMinutes:60*5});res.json({token:refreshed_token});});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果你需要撤回 tokens（当 token 的生存期比较长的时候这很有必要）那么你需要一个 token 的生成管理器去作检查。&lt;/p&gt;
&lt;p&gt;#3. Local / session storage 不会跨域工作，请使用一个标记 cookie&lt;br&gt;如果你设置一个 cookie 的域名为 .yourdomain.com 它将可以被 youdomain.com 和 app.yourdomain.com 获取，这样用户登录并且转到app.yourdomain.com 后也能很容易地从主域名找回这个 cookie（假如你的是电商网站）。&lt;br&gt;而另一方面，保存在 local / session storage 的 tokens，就不能从不同的域名中读取（甚至是子域名也不行）。那你能怎么做？&lt;br&gt;一个可能的选择是，当用户通过 app.yourdomain.com 上面的验证时你生成一个 token 并且作为一个 cookie 保存到 .yourdomain.com&lt;br&gt;    1&lt;br&gt;    2&lt;br&gt;    3&lt;br&gt;    4&lt;br&gt;    5&lt;br&gt;    6&lt;br&gt;    7&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$.post(&amp;apos;/authenticate, function() {  // store token on local/session storage or cookie    ....  // create a cookie signaling that user is logged in  $.cookie(&amp;apos;loggedin&amp;apos;, profile.name, &amp;apos;.yourdomain.com&amp;apos;);});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，在 youromdain.com 中你可以检查这个 cookie 是不是已经存在了，并且如果存在的话就转到 app.youromdain.com去。从这以后，这个 token 将会对程序的子域名以及之后通常的流程都有效（直到这个 token 超过有效期）。&lt;br&gt;不过这将会导致 cookie 存在但 token 被删除了或其他意外情况的发生。在这种情况下，用户将不得不重新登录。但重要的是，像我们之前说的，我们不会这个用 cookie 作为验证方法，只是作为一个存储机制去支持存储信息在不同的域名中。&lt;/p&gt;
&lt;p&gt;#4. 每个 CORS（跨域资源共享）请求都会带上预请求（Preflight request）&lt;br&gt;有些人指出 Authorization header 不是一个&lt;a href=&quot;http://www.w3.org/TR/cors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;simple header&lt;/a&gt;，因此对于一个特定的 URLs 的所有请求都会带上一个预请求。&lt;br&gt;    1&lt;br&gt;    2&lt;br&gt;    3&lt;br&gt;    4&lt;br&gt;    5&lt;br&gt;    6&lt;br&gt;    7&lt;br&gt;    8&lt;br&gt;    9&lt;br&gt;    10&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;OPTIONShttps://api.foo.com/barGEThttps://api.foo.com/barAuthorization:Bearer....OPTIONShttps://api.foo.com/bar2GEThttps://api.foo.com/bar2Authorization:Bearer....GEThttps://api.foo.com/barAuthorization:Bearer....
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但这只会发生在你发送 Content-Type: application/json 时。不过这说明已经出现在绝大多数的程序中了。&lt;br&gt;一个小小的警告，the OPTIONS 请求不会带有 Authorization header 自身，所以你的网络框架应该支持区别对待 OPTISON 和后来的请求。（微软的 IIS 因为某些原因好像会有问题）。&lt;/p&gt;
&lt;p&gt;#5. 当你需要流传送某些东西，请用 token 去获取一个已签名的请求。&lt;br&gt;当使用 cookies 时，你可以很容易开始一个文件的下载或流传送内容。然而，在 tokens 的使用中，请求是通过 XHR 完成的，你不能依赖于它。而解决方法应该是像 AWS 那样通过生成一个签名了的请求，例如，Hawk Bewits 是一个很好的框架去启用它：&lt;br&gt;Request:&lt;br&gt;    1&lt;br&gt;    2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;POST/download-file/123Authorization:Bearer...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Response:&lt;br&gt;    1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ticket=lahdoiasdhoiwdowijaksjdoaisdjoasidja
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个 ticket 是无状态并且是基于 URL 的：host + path + query + headers + timestamp + HMAC，并且有一个有效期。所以它可以用于像只能在5分钟内去下载一个文件。&lt;br&gt;你然后可以转到 /download-file/123? ticket=lahdoiasdhoiwdowijaksjdoaisdjoasidja 中去。服务器就会检查这个 ticket 是不是有效然后像正常一样开始下一步的服务。&lt;/p&gt;
&lt;p&gt;#6. &lt;a href=&quot;http://baike.baidu.com/view/50325.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XSS&lt;/a&gt; 比 &lt;a href=&quot;http://baike.baidu.com/view/1609487.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XSRF&lt;/a&gt; 要更容易防范&lt;br&gt;XSS 攻击的原理是，攻击者插入一段可执行的 JavaScripts 脚本，该脚本会读出用户浏览器的 cookies 并将它传输给攻击者，攻击者得到用户的 Cookies 后，即可冒充用户。但是要防范 XSS 也很简单，在写入 cookies 时，将 HttpOnly 设置为 true，客户端 JavaScripts 就无法读取该 cookies 的值，就可以有效防范 XSS 攻击。因为 Tokens 也是储存在本地的 session storage 或者是客户端的 cookies 中，也是会受到 XSS 攻击。所以在使用 tokens 的时候，必须要考虑过期机制，不然攻击者就可以永久持有受害用户帐号。&lt;br&gt;相比 XSS，XSRF 的危害性更大，因为大多数 Web 框架都已经内置了 XSS 防范机制（例如在 Ruby on Rails 中，用户的输入在输出的时候都会做转义操作，攻击者插入的脚本就无法执行），对于大部分开发者而言，甚至连 XSRF 都不知道是什么玩意，更别提防范了。XSRF 目前并不是每个 Web 框架都有防范机制，因此开发者更应该留意 XSRF 。&lt;/p&gt;
&lt;p&gt;#7. 注意 token 的大小&lt;br&gt;Token 机制在每次请求 API 的时候，都需要带上一个 Authorization 的 Http Header 。&lt;br&gt;    1&lt;br&gt;    2&lt;br&gt;    3&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#TokenGET/fooAuthorization:Bearer...2kbtoken...
1
2
3

#CookieGET/fooconnect.sid:...20bytescookie...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Token 的大小其实由你储存在 token 中的信息量所决定，例如可能有 nickname，openid 等开发者另外加上的信息。&lt;br&gt;但是 session cookies 机制只需要一个字串作为用户标识即可（例如 PHP 的 PHPSESSIONID），其中关于用户的信息都会直接储存到服务端的数据库中，当用户请求时才从数据库中捞出来用。&lt;br&gt;当然 Token 机制也可以仿照 session cookies 机制这么做了，也是个有效控制 token 大小的方法。&lt;br&gt;Token 中只保留关键的几条身份标识信息，其余都放到数据库里面了，权限控制的时候再捞出。这样做的好处是，开发者可以完全掌控 token，因为关键信息都已经是你代码和数据库中的一部分了，想怎么弄都可以了。&lt;br&gt;举个例子：&lt;br&gt;    1&lt;br&gt;    2&lt;br&gt;    3&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GET/fooAuthorization:Bearer……500bytestoken….Thenontheserver:
1
2
3
4
5
6
7
8
9
10

app.use(&amp;apos;/api&amp;apos;,// 首先检查 token；expressJwt({secret:secret}),// 然后再从数据库中捞出用户信息。function(req,res,next){req.user.extra_data=get_from_db();next();});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外值得一提的是，你也可以把东西都丢 Cookies 里面（而不是只丢个身份标识字串）。只要确保资料经过了严格的加密，攻击者无法利用，现在有些 Web 框架已经有类似机制，例如 Nodejs 的这个插件 &lt;a href=&quot;https://github.com/mozilla/node-client-sessions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mozilla/node-client-sessions&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;#8. 有需要的话，要加密并且签名 token&lt;br&gt;虽然 TLS/SSL 机制可以隔绝大多数中间人攻击，但是如果 token 中带有了用户的敏感信息，开发者也应该要加密这些信息。&lt;br&gt;使用 JWT（文中第 9 点） 可以加密 token，但是由于目前大多数 Web 框架还未支持 JWT，所以可以使用 AES-CBC 算法加密 token。&lt;br&gt;    1&lt;br&gt;    2&lt;br&gt;    3&lt;br&gt;    4&lt;br&gt;    5&lt;br&gt;    6&lt;br&gt;    7&lt;br&gt;    8&lt;br&gt;    9&lt;br&gt;    10&lt;br&gt;    11&lt;br&gt;    12&lt;br&gt;    13&lt;br&gt;    14&lt;br&gt;    15&lt;br&gt;    16&lt;br&gt;    17&lt;br&gt;    18&lt;br&gt;    19&lt;br&gt;    20&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app.post(&amp;apos;/authenticate&amp;apos;,function(req,res){// 校验用户；// 加密 token；varencrypted={token:encryptAesSha256(&amp;apos;shhhh&amp;apos;,JSON.stringify(profile))};// 给加密后的 token 签名；vartoken=jwt.sign(encrypted,secret,{expiresInMinutes:60*5});res.json({token:token});}functionencryptAesSha256(password,textToEncrypt){varcipher=crypto.createCipher(&amp;apos;aes-256-cbc&amp;apos;,password);varcrypted=cipher.update(textToEncrypt,&amp;apos;utf8&amp;apos;,&amp;apos;hex&amp;apos;);crypted+=cipher.final(&amp;apos;hex&amp;apos;);returncrypted;}// 上面就是 encrypt-then-MAC （加密后签名）做法。 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然你也可以用文中的第 7 点，直接将敏感信息丢数据库中。&lt;/p&gt;
&lt;p&gt;#9. 将 JSON Web Tokens 应用到 OAuth 2&lt;br&gt;OAuth 2 是一个解决身份验证的授权协议，并且广泛地使用了 token 。&lt;br&gt;用户通过 OAuth 2 协议授权第三方应用权限，然后服务器返回一个 access_token 给第三方应用，通常也带有 scope 参数，第三方应用通过带上access_token 请求服务器，可以在授权范围（scope）内调用 API。&lt;br&gt;一般来说，类似这种 token 是不透明的，就是核心数据都储存以 hash-table 结果储存在服务器中，客户端只持有一个令牌（access_token），任何人都可以用这个令牌在授权范围（scope）内调用服务器端的 API。&lt;br&gt;Signed tokens（例如 &lt;a href=&quot;http://jwt.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JWT&lt;/a&gt;)）和这种形式的 token 最主要的区别是，JWT 是无状态的，它不储存在服务端 hash-table 中，服务端中不保留 JWT 请求的相关信息，JWT 会把授权信息和 API 调用返回都丢一起返回给客户端。&lt;br&gt;JWT 通常以 Base64 + AES 方式编码传输。OAuth 2 协议也支持 JWT，因为 OAuth 2 并未限制 access_token 数据格式，你可以将 JWT 应用在 OAuth 2 上。&lt;/p&gt;
&lt;p&gt;#10. Tokens 不是万能的解决方法，得根据你的需求自行采用&lt;br&gt;这些年来，我们帮助过不少大公司实现了他们的以 Token 为基础的验证授权架构。曾经有一家 10k + 员工，有着大量数据的公司，他们想实现一个中央权限管理系统，其中有一个需要是某个员工只能读取某个国家某个医院某个床位的id和name字段数据，想想这样的细粒度的权限管理是多么难实现，无论是技术上还是行政上。&lt;br&gt;当然采用 tokens 与否，得看大家的具体需求，但是，要忠告大家的是，不要什么内容都写到 tokens 了，加之前想想有没有这个必要&lt;/p&gt;
&lt;p&gt;原文 &lt;a href=&quot;https://ruby-china.org/topics/7343&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ruby-china.org/topics/7343&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
       关于 Token，你应该知道的十件事 
    
    </summary>
    
      <category term="token" scheme="http://offbye.com/categories/token/"/>
    
      <category term="oauth" scheme="http://offbye.com/categories/token/oauth/"/>
    
      <category term="jwt" scheme="http://offbye.com/categories/token/oauth/jwt/"/>
    
    
  </entry>
  
  <entry>
    <title>程序员的成长和代码行数的关系</title>
    <link href="http://offbye.com/2016/05/04/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%88%90%E9%95%BF%E5%92%8C%E4%BB%A3%E7%A0%81%E8%A1%8C%E6%95%B0%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>http://offbye.com/2016/05/04/程序员的成长和代码行数的关系/</id>
    <published>2016-05-04T04:39:00.000Z</published>
    <updated>2016-05-12T16:40:00.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章很有价值，看了这个文章后马上针对一个架构问题做了决定，在2种方案里面选了只增加线性复杂度的那个。&lt;br&gt;在2011年John D. Cook写了一篇&lt;a href=&quot;http://www.johndcook.com/blog/2011/11/22/norris-number/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客&lt;/a&gt;，其中提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的朋友Clift Norris发现了一个基本常数，我称之为Norris常数，一个未经培训的程序员在他或她遇到瓶颈之前能写出的平均代码量。Clift估计这个值是1500行。超过这个数以后，代码会变得如此混乱，以至于本人都无法轻而易举的进行调试和修改。&lt;br&gt;我还不了解足够多的初级程序员来验证这一结果，不过我自己认识到，程序员生涯的下一个瓶颈将发生在20,000行。我把Norris常数改成2,000那样正好变成十倍。&lt;br&gt;在我离开大学之后的第一份工作中，我和我的同事一样（和我差不多年纪）反复遇到了20,000行的瓶颈。在梦工厂我们有950个程序给动画师使用，行数统计显示多的一些基本在20,000 至25,000行。超过这个数的话即再多的努力也无法增加新特性了。&lt;br&gt;在1996年年中的时候我负责编写&lt;a href=&quot;http://www.teamten.com/lawrence/oscar/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;梦工厂的照明工具&lt;/a&gt;（和另外两个程序员），我知道这将远远超过20,000行代码。我改变了我的编程方法并且这个工具一年后以大约200,000行的代码量成功交付。 （这个工具计划于2013年退役，在16年时间里它被每天使用并用来拍摄了21部电影。）我因为写了好几个行数在10万到20万的程序，我很确定我遇到了下一个瓶颈，我已经能够能感觉到它。&lt;br&gt;特别难的部分是和一些没有像你一样打破了好几道瓶颈的人讨论技术。打破这些瓶颈意味着做出不同的取舍，特别是一些短期内看起来不合理但以后会有所帮助决定。这很难去争论，短期内的优点是显而易见的，但我无法说服任何人说从现在起一年内可能有人会做出一个看似无害但是会破坏现有代码的改动。&lt;br&gt;Edsger Dijkstra 在1969年&lt;a href=&quot;http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD249.PDF&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;写道&lt;/a&gt;：&lt;br&gt;一个一岁多的孩子会以一定的速度匍匐前进，比如说每小时一英里。但每小时一千英里的速度就是一架超音速喷气机。就物体的移动能力而言这两者是没有可比性的，任何其中一个可以到的但是另一个不能做到，反之亦然。&lt;br&gt;一个Clift 所指的初级程序员，学会了爬行，接着蹒跚学步，然后行走，然后慢跑，然后再跑步，最后冲刺，他认为，“以这样加速度前进我可以赶上超音速喷气机的速度！“但他跑进了2,000行的极限，因为他的技能不会再按比例增加。他必须改变移动方式，比如开车去获得更快的速度。然后，他就学会了开车，开始很慢，然后越来越快，但有进入到了20000行极限。驾驶汽车的技术不会变成开喷气式飞机。&lt;br&gt;我的朋友&lt;a href=&quot;http://www.plunk.org/~grantham/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brad Grantham&lt;/a&gt;用新手程序员用“蛮力”解决问题来说明了这一点。我认为这是正确的：当代码是在2,000行以下，你可以写任何混乱肮脏的代码并依靠你的记忆拯救你。深思熟虑的类和包分解会让你的代规模达到20,000行。&lt;br&gt;突破这个瓶颈的关键是什么？对我而言，就是让事情保持简单。除非现在就非常需要，否则完全拒绝添加任何新特性或者新代码。我已经在&lt;a href=&quot;http://www.teamten.com/lawrence/writings/every_line_is_a_potential_bug.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Every Line Is a Potential Bug&lt;/a&gt;中提高了这一点（在&lt;a href=&quot;http://www.teamten.com/lawrence/writings/plan03.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simple is Good&lt;/a&gt;之前还是一知半解）。梦工厂的首席特效架构师是这么理解的：&lt;br&gt;对我而言，照明工具成功的地方在于他选择了一系列容易使用和维护的小功能并且强大到足够成为一个非常棒的照明工具。&lt;br&gt;作为一名技术领导我明白我主要的贡献是对那些同事觉得非常重要但不能证明其合理的需求说“不”。但真正的诀窍是知道什么需求增加了线性的复杂度（只和自身相关）和指数级复杂度（和别的需求有关联）。两者都因该去避免，但后者需要更令人信服的理由。&lt;br&gt;举个例子，在2012年，Linux内核有&lt;a href=&quot;http://www.h-online.com/open/news/item/Linux-kernel-exceeds-15-million-lines-of-code-1409952.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1500万行代码&lt;/a&gt;。其中75％是具有线性复杂度的（驱动，文件系统和处理器结构相关的代码）。你可能有许多视屏驱动，但他们之间没有任何（或很少）的交互。剩下的则有更多的依赖关系。&lt;br&gt;Dijkstra觉得很难去教授这些先进的方法，因为他们只对那些2万行或者20万行的程序才有意义。任何的类或者规范必须限制其示例在几百行以内，暴力方法在这里也同样适用。你真的需要范例给你显示30,000行代码然后证实因为程序上手并不是非常复杂所以新功能能够很容易的被添加。但这实际上是不可能的。.&lt;br&gt;我不知道做出什么改变来突破20万行的瓶颈。我最近已经切换到了更纯粹的函数式风格并减少了可变状态，也许这些能让我有所突破。&lt;br&gt;而且我很想知道到代码量达到2000万行的时候会变成什么样子。&lt;br&gt;在三百万到四百万行代码左右似乎有一道无形的墙，无论多少人（数以百计）或多少年（数十年）花在上面增长率将会显著降低。－&lt;a href=&quot;https://plus.google.com/u/0/107919048662113456495/posts/AyGGqF9mLdB&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dan Wexler&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
       程序员的成长和代码行数的关系 
    
    </summary>
    
      <category term="架构" scheme="http://offbye.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="架构师" scheme="http://offbye.com/categories/%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
      <category term="复杂度" scheme="http://offbye.com/categories/%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%84%E5%B8%88/%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>从JavaAndroid到Swift iOS开发：语言与框架对比</title>
    <link href="http://offbye.com/2016/05/04/%E4%BB%8EJavaAndroid%E5%88%B0Swift%20iOS%E5%BC%80%E5%8F%91%EF%BC%9A%E8%AF%AD%E8%A8%80%E4%B8%8E%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/"/>
    <id>http://offbye.com/2016/05/04/从JavaAndroid到Swift iOS开发：语言与框架对比/</id>
    <published>2016-05-04T02:48:00.000Z</published>
    <updated>2016-05-12T16:40:00.000Z</updated>
    
    <content type="html">&lt;p&gt;本文是我在『移动前线』微信群2016年4月28日的&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&amp;amp;mid=2651112156&amp;amp;idx=1&amp;amp;sn=8dfaa630e8bc6ef66b4263bffd2d29dc&amp;amp;scene=1&amp;amp;srcid=0429FvoQr642MP2BZ5cSMynm&amp;amp;from=singlemessage&amp;amp;isappinstalled=0#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;分享总结&lt;/a&gt;整理。&lt;br&gt;我从2009年开始做Android开发，开始接触Swift是在2014年底，当时组里曾经做过一个Demo App，感觉技术还不够成熟没有正式发布。2016年初我们正式使用swift开发上线了销售助手App产品，积累了比较丰富的swift项目实战经验，开源框架都是用的swift版本，大量使用了面向协议和函数式编程。iOS App开发人员基本都是以前安卓版本的开发人员，同时维护安卓和iOS 2个版本，效率很高。&lt;br&gt;今天分享的主题是Java/Android开发人员如何快速上手Swift iOS开发。主要内容如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;WhyFrom Java/Android to Swift&lt;/li&gt;
&lt;li&gt;Swift语言为什么值得学习？&lt;/li&gt;
&lt;li&gt;Javavs Swift语法比较&lt;/li&gt;
&lt;li&gt;Android和iOS UI开发比较&lt;/li&gt;
&lt;li&gt;Androidvs Swift iOS框架比较&lt;/li&gt;
&lt;li&gt;开发工具比较&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;##1、Why FromJava/Android to Swift&lt;br&gt;成本和效率方面，由于目前同业务的Android和iOS App产品功能一致，由一个团队开发可以降低业务同步和沟通成本，避免安卓和iOS两个团队带来的产品功能差异和沟通成本。&lt;br&gt;Swift语法更接近Java，相对Objective C上手容易，我2012年曾经带过iOS项目，学过oc，因为无法忍受oc奇怪的语法最后放弃了，但这次学习swift iOS过程还是挺顺畅的，学习的主要门槛反而是Xcode IB的使用。&lt;br&gt;Whynot React Native？&lt;br&gt;ReactNative我们也要项目在用。但RN思想和语法的学习曲线有些陡，很多有Web开发经验的人都不一定喜欢。另外很多安卓开发者并没有学习过js，学习React Native成本会比较高。学习React Native最终还是要对原生开发有一定的了解。最后，在一些功能复杂的App，React Native用户体验比不上原生 。&lt;/p&gt;
&lt;p&gt;Whynot HTML5 Hybrid App？&lt;br&gt;用户体验不够好，对于不熟悉Web开发的工程师学习成本比较高。&lt;br&gt;2014年我们用ionic框架做过混合App，在iOS上效果可以，但在安卓低端机上比较卡，影响用户体验。&lt;/p&gt;
&lt;p&gt;##2、Swift语言为什么值得学习？&lt;br&gt;Swift是现在Apple主推的语言，2014年新推出的语言，比Scala等“新”语言还要年轻10岁。2015年秋已经开源。目前在linux上可用，最近已经支持Android NDK；在树莓派上有SwiftyGPIO库，可以通过GPIO控制一些硬件。&lt;br&gt;ObjectC is old and ugly，oc是1983年苹果推出的，过于陈旧和臃肿。&lt;br&gt;Swift语法类似Scala，Javascript ES6， Java，OC， C++， Python，这个我是按照语法相似度排序的。&lt;br&gt;Swift支持多范式编程：面向协议，面向对象和函数式编程 。&lt;br&gt;最后，我们还可以通过Swift学习函数式编程思想，这块Java8才支持。&lt;/p&gt;
&lt;p&gt;##3、Java vs. Swift语法比较&lt;br&gt;l 基础语法&lt;br&gt;l 函数&lt;br&gt;l struct和class&lt;br&gt;l Enum&lt;br&gt;l Interface vsProtocol&lt;br&gt;l MultiThread&lt;/p&gt;
&lt;p&gt;3.1基础语法&lt;/p&gt;
&lt;p&gt;Java&lt;br&gt;Swift&lt;br&gt;static final 常量&lt;br&gt;Java语言没有，Guava库提供&lt;br&gt;Java支持自增++，自减—&lt;br&gt;逻辑控制和C基本一致&lt;br&gt;Java有main方法&lt;br&gt;Java需要;做行结束符&lt;br&gt;var 变量，let常量&lt;br&gt;可选型Optional，通过if let解包&lt;br&gt;Swift不建议使用，3.0版本将不支持自增&lt;br&gt;逻辑控制语句更现代&lt;br&gt;Swift没有main方法&lt;br&gt;Swift不需要行结束符&lt;br&gt;Swift的switch 语法和Java及C++很像，但是它没有break，他命中一个case后会自动退出switch。对于几个不同case同样处理的情况，可以case后面连续几个condition，用逗号隔开。&lt;br&gt;for循环和Java也基本一样，不过也是不需要括号。for循环中，..&amp;lt;的用法比较方便。下划线符号_（替代循环中的变量）能够忽略具体的值，并且不提供循环遍历时对值的访问。for-in则有点类似与Java中for each循环。&lt;br&gt;Swift 2.2中trycatch和do while和java差异很大&lt;/p&gt;
&lt;p&gt;3.2函数和闭包&lt;br&gt;Swift函数的定义和Java很不一样，Swift函数的定义形如 func foo(arg: Type) -&amp;gt;Return Type:&lt;br&gt;Swift中函数是一等公民，可以作为返回值和参数；Swift支持闭包，Java8才支持lambda闭包。&lt;br&gt;Swift支持元组，Swift函数可以通过返回元组支持多个返回值。&lt;br&gt;Swift函数可以嵌套，即一个函数内部还可以定义函数，Java不支持。&lt;br&gt;Swift函数可以接收不定参数，跟Java基本类似&lt;br&gt;Swift函数参数可以带默认值，和Python类似，Java函数不可以带有默认值。&lt;br&gt;常用的函数式编程方法map,reduce, flatMap,filter,sort，相对于理解抽象的函数式编程概念，我觉得开始时先用好这些函数更重要。&lt;/p&gt;
&lt;p&gt;3.3struct vs. class&lt;br&gt;struct是值类，class是引用类型，Java语言没有struct，但c/c++/c#语言都有。&lt;br&gt;Swift开发推荐使用struct，而不是class。Swift语言实现包括几百个struct，只有几个class。&lt;br&gt;Swift类构造方法是init()，析构方法是deinit()，类方法调用跟Java基本一样。&lt;br&gt;self相当于Java中的this，传入生命周期不一致的闭包时需要声明为weak。&lt;/p&gt;
&lt;p&gt;3.4 Enum枚举&lt;br&gt;Android开发谷歌官方不建议使用Enum，影响性能。&lt;br&gt;Swift的Enum和Java类似，本质是一个类，里面可以包含函数。&lt;br&gt;SwiftEnum语法更简单。&lt;br&gt;SwiftEnum支持扩展extension。&lt;/p&gt;
&lt;p&gt;3.5 Interface vs. Protocol&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java Interface &lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Swift Protocol&lt;/strong&gt;&lt;br&gt;•        可以继承&lt;br&gt;•        Interface不能带有具体实现的方法，Java8以后才可以&lt;br&gt;•        implements&lt;/p&gt;
&lt;p&gt;•        可以继承&lt;br&gt;•        protocol可以带有具体实现的方法&lt;br&gt;•        extension更强大&lt;/p&gt;
&lt;p&gt;Extension扩展就是向一个已有的类、结构体或枚举类型添加新功能（functionality）。这包括在没有权限获取原始源代码的情况下扩展类型的能力（即逆向建模）。扩展和 Objective-C 中的分类（categories）类似。&lt;br&gt;Swift 中的扩展可以：&lt;br&gt;l  添加计算型属性和计算静态属性&lt;br&gt;l  定义实例方法和类型方法&lt;br&gt;l  提供新的构造器&lt;br&gt;l  定义下标&lt;br&gt;l  定义和使用新的嵌套类型&lt;br&gt;l  使一个已有类型符合某个接口&lt;br&gt;需要注意的是扩展方法的作用域问题，这里不展开讨论。&lt;br&gt;3.6 MultiThread多线程&lt;br&gt;&lt;strong&gt;Java Android&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Swift iOS&lt;/strong&gt;&lt;br&gt;•        Thread,Runnable&lt;br&gt;•        Java 5  Concurrency包&lt;br&gt;•        Android多线程扩展&lt;br&gt;•        AsyncTask,Looper,HandleThread,IntentService…&lt;br&gt;•        NSThread&lt;br&gt;•        GCD&lt;br&gt;•        NSOperation，NSOperationQueue&lt;/p&gt;
&lt;p&gt;iOS的多线程相对Java来说比较简单，GCD一天时间基本就能够弄明白。Java的Concurrency包就比较复杂了。&lt;/p&gt;
&lt;p&gt;##4、Android，iOS UI开发比较&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java Android&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Swift iOS&lt;/strong&gt;&lt;br&gt;•        Xml  layout布局&lt;br&gt;•        直接写xml代码，可视化辅助开发&lt;br&gt;•        Android可以用Java添加和实现view&lt;br&gt;•        Intent页面跳转&lt;br&gt;•        Java自定义view,可以在Activity和layout中使用，可视化支持不够好&lt;/p&gt;
&lt;p&gt;•        Xib &amp;amp;  StoryBoard&lt;br&gt;•        AutoLayout和SizeClass，IB自动生成，代码合并困难；&lt;br&gt;•        很多团队只好用代码实现UI界面&lt;br&gt;•        Segue连线跳转&lt;br&gt;•        自定义View可以使用IBDesignable  &amp;amp;  runtime attributes&lt;/p&gt;
&lt;p&gt;iOS开发苹果官方建议使用Storyboard开发UI，好处是比较直观，通过看界面可以更好的理解和维护App。现在Xcode7版本对AutoLayout和SizeClasses的支持越来越好，多分辨率适配变得简单，建议大家放弃使用frame代码写界面的传统做法。&lt;br&gt;当然，Storyboard也有下面的弊端：&lt;br&gt;界面主要依靠IB生成，Xib代码难以维护，Xcode打开Storyboard或Xib就会对文件产生修改，即使我们没有做实际的修改，git也会显示文件修改了。&lt;br&gt;多人协助，同时修改导致冲突，合并困难。&lt;br&gt;Storyboard中包含页面多了后会占用了太多内存，导致Xcode卡顿和崩溃。&lt;br&gt;错误定位困难，错误提示不清晰，新手难以定位错误。例如不小心删掉了IBOutlet会很难定位。&lt;/p&gt;
&lt;p&gt;Storyboard UI 开发实践&lt;br&gt;按照业务模块分成多个Storyboard，每人负责的模块避免交叉。&lt;br&gt;每个storyboard不要超过10个页面，可以通过Refactor  Storyboard功能重新划分。&lt;br&gt;用Container在一个storyboard复用UI模块，用xib在多个storyboard复用UI模块。&lt;br&gt;复杂的输入表单，建议用SwiftyForm框架写代码。&lt;/p&gt;
&lt;p&gt;##5、Android vs Swift iOS框架比较&lt;br&gt;Swift框架现在已经很多了，Swift也可以使用OC开源框架，但不推荐使用。我们主要对比介绍项目常用的网络请求框架，JSON解析和图片缓存框架&lt;br&gt;网络请求框架&lt;br&gt;&lt;strong&gt;Java Android&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Swift iOS&lt;/strong&gt;&lt;br&gt;•        Retrofit&lt;br&gt;•        OKHTTP&lt;br&gt;•        Volley&lt;br&gt;•&lt;br&gt;•        Retrofit  + RxAndroid&lt;/p&gt;
&lt;p&gt;•        Moya&lt;br&gt;•        Alamofire&lt;br&gt;•        AFNetworking&lt;br&gt;•&lt;br&gt;•        Moya +  RxSwift&lt;/p&gt;
&lt;p&gt;在Android开发现在一般使用OKHTTP，Retrofit和Volley等网络框架进行开发，iOS开发oc时代使用AFNetworking库开发，swift开发推荐使用Alamofire和Moya库。&lt;br&gt;Moya 对Alamofire网络请求库进行了封装，开发不需要写网络模型，管理等。使代码更加简洁。Moya可以代替自己编写的网络抽象层APIManager。Moya提供了一些很好的特性：&lt;br&gt;编译期检查API接口调用的正确性&lt;br&gt;通过enum枚举类型清晰的定义不同API的接口&lt;br&gt;把接口测试stub作为一等公民，让单元测试变得很简单。&lt;br&gt;支持ReactiveX扩展，方便和RxSwift集成。&lt;/p&gt;
&lt;p&gt;目前App基本都是使用JSON作为报文协议，Android开发我们一般使用Gson进行解析，在Swift开发中，对比了ObjectMapper，Argo+Curry，SwiftyJson后，我们决定使用ObjectMapper作为JSON解析框架。ObjectMapper支持的特性如下：&lt;br&gt;支持把对象转换成JSON，把JSON转换成类对象&lt;br&gt;支持嵌套的对象（单一对象，对象列表集合和字典）&lt;br&gt;支持自定义的转换函数&lt;br&gt;支持结构体struct&lt;br&gt;支持Realm和Alamofire集成，AlamofireObjectMapper&lt;br&gt;使用例子：&lt;br&gt;let user = Mapper&lt;user&gt;().map(JSONString)&lt;br&gt;    let JSONString = Mapper().toJSONString(user, prettyPrint: true)&lt;br&gt;Realm是iOS开发比较流行的针对移动端设计的数据库，代替sqlite，也有Android版本&lt;br&gt;图片缓存框架，Android开发常用Glide和Fresco，OC开发一般用SDWebImage，Swift开发推荐用HanekeSwift。&lt;/user&gt;&lt;/p&gt;
&lt;p&gt;##6、开发工具比较&lt;br&gt;Android目前主流的开发工具是Android Studio，2014年以前是Eclipse ADT。&lt;br&gt;iOS开发一直使用Xcode。对于Java/Android开发人员来说，Xcode上手较难，特别是Interface Builder，Xib和视图代码直接通过连线来生成事件方法，比较挑战开发习惯，并且出现问题定位困难。而Android开发者习惯手写xml界面代码。&lt;br&gt;与Android Studio相比，Xcode速度快，但不够稳定，一天崩溃几次很正常。&lt;br&gt;模拟器方面，Android的Emulator是虚拟机，启动和安装速度比较慢，iOS是Simulator，速度快，但有些功能不能模拟。都推荐使用真机进行开发。&lt;/p&gt;
&lt;p&gt;包管理器&amp;amp;构建工具对比&lt;br&gt;Android开发早期用Ant做一些任务处理，后面有些团队借鉴Java EE项目的做法用Maven，AndroidStudio出现后谷歌推荐用Gradle。Android的构建工具比iOS功能要强大很多。&lt;br&gt;iOS开发早期用CocoaPods，现在推荐用Carthage，未来Apple官方推出Swift3.0后会推广官方的Swift Package Manager。&lt;br&gt;最后介绍下Xcode包管理器Alcatraz，主要提供Xcode插件，模板和色彩模式，相比Android Studio，目前插件还很比较少。&lt;/p&gt;
</content>
    
    <summary type="html">
    
       从JavaAndroid到Swift iOS开发：语言与框架对比 
    
    </summary>
    
      <category term="Android" scheme="http://offbye.com/categories/Android/"/>
    
      <category term="Swift" scheme="http://offbye.com/categories/Android/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>Android开发常用开源框架推荐</title>
    <link href="http://offbye.com/2016/04/26/Android%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E6%8E%A8%E8%8D%90/"/>
    <id>http://offbye.com/2016/04/26/Android开发常用开源框架推荐/</id>
    <published>2016-04-26T06:49:00.000Z</published>
    <updated>2016-05-12T16:40:00.000Z</updated>
    
    <content type="html">&lt;p&gt;目前我们在Android开发中，不可避免地要用到大量的开源项目，本文对常用的开源项目进行一些推荐。&lt;/p&gt;
&lt;p&gt;首先是如何选择开源项目？建议优先选择github上比较活跃的开源项目，尽量避免从网页上零散的拷贝代码。选择开源项目的原则有下面这些：&lt;br&gt;´ Stars, Issues, Pull Requests&lt;br&gt;´ 文档和Demo，典型用户&lt;br&gt;´ 弄清楚原理&lt;br&gt;´ 结合实际业务场景&lt;/p&gt;
&lt;p&gt;推荐Android开源项目汇总，基本上常见UI效果都能找到&lt;br&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Trinea/android-open-project&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面我把常用的框架分为下面几类，分别推荐&lt;br&gt;UI框架和自定义控件&lt;br&gt;网络请求框架&lt;br&gt;图片缓存框架&lt;br&gt;数据存储框架&lt;br&gt;事件总线框架&lt;br&gt;插件化和热部署&lt;/p&gt;
&lt;p&gt;##1、UI框架和自定义控件&lt;br&gt;´ View注入框架&lt;br&gt;´ Butter Knife专注于Android 系统View 的注入框架，结合Android Studio插件使用&lt;br&gt;´ 下拉刷新和加载更多&lt;br&gt;´ Android-PullToRefresh,android-Ultra-Pull-to-Refresh,Android-PullToRefreshRecyclerView&lt;br&gt;´ 侧边栏菜单&lt;br&gt;´ 推荐官方Design支持库自带的&lt;br&gt;´ SlidingMenu，通过拖动屏幕边缘滑出菜单，支持屏幕左右划出，支持菜单 Zoom、Scale、Slide Up 三种动画样式出现&lt;br&gt;´ base-adapter-helper&lt;br&gt;´ 对传统的BaseAdapter ViewHolder 模式的一个封装，主要功能就是简化书写 AbsListView 的 Adapter 的代码，如 ListView，GridView&lt;br&gt;MPAndroidChart图表库&lt;/p&gt;
&lt;p&gt;##2、网络请求框架&lt;br&gt;目前推荐使用Volley + OKHTTP，&lt;br&gt;参考我们自己的脚手架项目，新安卓项目要求使用。&lt;/p&gt;
&lt;p&gt;##3、图片缓存框架&lt;br&gt;推荐使用谷歌官方建议的Glide，备选Facebook的Freso&lt;/p&gt;
&lt;p&gt;##4、数据存储框架&lt;br&gt;无特殊需求推荐使用DBFlow ORM框架。&lt;/p&gt;
&lt;p&gt;##5、事件总线框架&lt;br&gt;推荐使用EventBus。&lt;br&gt;手机App项目根据需求决定是否用EventBus；安卓平板项目，主要基于Fragment实现UI，需要使用EventBus。&lt;/p&gt;
&lt;p&gt;##6、插件化和热部署&lt;br&gt;这块我们只进行了一些实验，没有实际部署。&lt;br&gt;插件化推荐DroidPlugin&lt;br&gt;热部署推荐androidFix&lt;/p&gt;
</content>
    
    <summary type="html">
    
       Android开发常用开源框架推荐 
    
    </summary>
    
      <category term="android开发" scheme="http://offbye.com/categories/android%E5%BC%80%E5%8F%91/"/>
    
      <category term="开源框架" scheme="http://offbye.com/categories/android%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
      <category term="开源项目" scheme="http://offbye.com/categories/android%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift Modules for React Native</title>
    <link href="http://offbye.com/2016/04/22/Swift%20Modules%20for%20React%20Native/"/>
    <id>http://offbye.com/2016/04/22/Swift Modules for React Native/</id>
    <published>2016-04-22T10:20:00.000Z</published>
    <updated>2016-05-12T16:40:01.000Z</updated>
    
    <content type="html">&lt;p&gt;React Native is an Objective-C application framework that bridges JavaScript applications running in the JSCore JavaScript engine to iOS and Android native APIs.&lt;br&gt;In theory, you write your application logic in JSX and ES6/7 and transpile it to JavaScript, and the application framework loads all that as a bundle.&lt;br&gt;In practice, you will want to expose your own custom native code to your JavaScript application. You may want to provide access to 3rd party library APIs or iOS framework features that aren’t exposed (yet) by React Native.&lt;br&gt;React Native is written in Objective-C, but we can write modules in Swift and expose them to our applications. The documentation on the React Native site briefly talks about “&lt;a href=&quot;https://facebook.github.io/react-native/docs/native-modules-ios.html#exporting-swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exporting Swift&lt;/a&gt;,” but is thin on the details of doing much of anything in Swift. In this article, we’ll do a deeper dive into interfacing Swift to JavaScript.&lt;br&gt;It is assumed you already have React Native and its prerequisites installed on your system. You can find the code used in this article in this GitHub repository:&lt;a href=&quot;https://github.com/ModusCreateOrg/swift-modules-for-react-native&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/ModusCreateOrg/swift-modules-for-react-native&lt;/a&gt;.&lt;br&gt;Create a React Native project and open it in Xcode:&lt;br&gt;    $ react-native init SwiftBridge&amp;amp;&amp;amp; cd SwiftBridge$ ls&lt;br&gt;    android/         index.ios.js     node_modules/index.android.js ios/package.json&lt;br&gt;    $ ls iosSwiftBridge/SwiftBridge.xcodeproj/SwiftBridgeTests/$ open ios/SwiftBridge.xcodeproj&lt;br&gt;Click the run button in Xcode and see that the project builds and runs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN01.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN01.png&quot; alt=&quot;SMRN01&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN02.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN02.png&quot; alt=&quot;SMRN02&quot;&gt;&lt;/a&gt;&lt;br&gt;At this point, we know that if the application fails to compile or run, it is something we’ve done to the project at fault.&lt;br&gt;We’ll start by implementing &lt;a href=&quot;https://facebook.github.io/react-native/docs/native-modules-ios.html#exporting-swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;the CalendarManager sample code from the React Native docs&lt;/a&gt; and see that it works.&lt;br&gt;First, we need to add our Swift source file. Right click on SwiftBridge and select “New File…”:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN03.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN03.png&quot; alt=&quot;SMRN03&quot;&gt;&lt;/a&gt;&lt;br&gt;Choose iOS and Swift File from the “Choose template” dialog:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN04.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN04.png&quot; alt=&quot;SMRN04&quot;&gt;&lt;/a&gt;&lt;br&gt;Choose a filename for the file:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN05.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN05.png&quot; alt=&quot;SMRN05&quot;&gt;&lt;/a&gt;&lt;br&gt;You will be asked if you would like to configure an Objective-C bridging header. We will need this, so click on the Create button:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN06.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN06.png&quot; alt=&quot;SMRN06&quot;&gt;&lt;/a&gt;&lt;br&gt;At this point, Xcode has created two files in the project:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN07.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN07.png&quot; alt=&quot;SMRN07&quot;&gt;&lt;/a&gt;&lt;br&gt;We copy the CalendarManager.swift example code from the React Native docs page and paste it into our CalendarManager.swift file:&lt;br&gt;    ////  CalendarManager.swift//  SwiftBridge////  Created by Michael Schwartz on 12/11/15.//  Copyright © 2015 Facebook. All rights reserved.//importFoundation// CalendarManager.swift@objc(CalendarManager)classCalendarManager:NSObject{@objc func addEvent(name:String, location:String, date:NSNumber)-&amp;gt;Void{// Date is ready to use!}}&lt;br&gt;Unfortunately, we have to provide an Objective-C file that exposes our Swift to the React Native Objective-C framework. Create the file “CalendarManageBridge.m” by selecting “New File” as before and choose Objective-C File this time:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN08.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN08.png&quot; alt=&quot;SMRN08&quot;&gt;&lt;/a&gt;&lt;br&gt;This time you will be presented with a “Choose options for your new file” dialog:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN09.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN09.png&quot; alt=&quot;SMRN09&quot;&gt;&lt;/a&gt;&lt;br&gt;Enter “CalendarManagerBridge” in the File text field and click the Next button. Click the Create button on the next dialog:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN10.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN10.png&quot; alt=&quot;SMRN10&quot;&gt;&lt;/a&gt;&lt;br&gt;The file is added to your project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN11.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN11.png&quot; alt=&quot;SMRN11&quot;&gt;&lt;/a&gt;&lt;br&gt;Copy and paste the code from the React Native docs page to this file:&lt;br&gt;    ////  CalendarManagerBridge.m//  SwiftBridge////  Created by Michael Schwartz on 12/11/15.//  Copyright © 2015 Facebook. All rights reserved.//#import // CalendarManagerBridge.m#import “RCTBridgeModule.h”@interface RCT_EXTERN_MODULE(CalendarManager,NSObject)RCT_EXTERN_METHOD(addEvent:(NSString&lt;em&gt;)name location:(NSString&lt;/em&gt;)location date:(NSNumber*)date)@end&lt;br&gt;Finally, we edit the SwiftBridge-Bridging-Header.h file and copy the two lines from the React Native docs page there:&lt;br&gt;    ////  Use this file to import your target’s public headers that you would like to expose to Swift.//// CalendarManager-Bridging-Header.h#import “RCTBridgeModule.h”&lt;br&gt;Click on the run button in Xcode again and the project should run. If not, you did something wrong in the above steps.&lt;br&gt;In theory, we now have our Swift CalendarManager class exposed to JavaScript. It should appear to JavaScript as React.NativeModules.CalendarManager. Use the editor of your choice to add the following line to index.ios.js, just after the line that required react-native:&lt;br&gt;    varReact=require(‘react-native’);// after this lineconsole.dir(React.NativeModules.CalendarManager);// ← add this line&lt;br&gt;When we run the project from Xcode with this line, we will get a red screen error:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN12.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN12.png&quot; alt=&quot;SMRN12&quot;&gt;&lt;/a&gt;&lt;br&gt;It seems console.dir() is only present if we’re debugging via Chrome. Click the Dismiss (ESC) link on the red screen, then from the Simulator’s Hardware menu, choose Shake Gesture and choose “Debug in Chrome” from the action sheet that appears in the emulator window:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN13.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN13.png&quot; alt=&quot;SMRN13&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN14.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN14.png&quot; alt=&quot;SMRN14&quot;&gt;&lt;/a&gt;&lt;br&gt;You should see a new window or tab in Chrome that looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN15.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN15.png&quot; alt=&quot;SMRN15&quot;&gt;&lt;/a&gt;&lt;br&gt;After hitting Command-Shift-J as the page suggests, you should see something like this:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN16.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN16.png&quot; alt=&quot;SMRN16&quot;&gt;&lt;/a&gt;&lt;br&gt;Note that the console.dir() did work and you can expand the Object to see that our React.NativeModule.CalendarManager object is exposed to JavaScript and it contains the addEvent() method as we expect.&lt;br&gt;Let’s implement some code in the addEvent() method to see that we can call it from JavaScript and access the arguments passed to Swift. Edit CalendarManager.swift so it looks like this:&lt;br&gt;    ////  CalendarManager.swift//  SwiftBridge////  Created by Michael Schwartz on 12/11/15.//  Copyright © 2015 Facebook. All rights reserved.//importFoundation// CalendarManager.swift@objc(CalendarManager)classCalendarManager:NSObject{@objc func addEvent(name:String, location:String, date:NSNumber)-&amp;gt;Void{NSLog(“%@ %@ %S”, name, location, date);}}&lt;br&gt;All that’s really changed is the NSLog() call to dump the passed variables. Let’s also add a call to the addEvent() method to index.ios.js, just after the console.dir():&lt;br&gt;    React.NativeModules.CalendarManager.addEvent(‘One’,‘Two’,3);&lt;br&gt;When we run this, and the application crashes. There is an error reported in both Chrome Dev Tools and Xcode and in the simulator.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN17.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN17.png&quot; alt=&quot;SMRN17&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN18.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN18.png&quot; alt=&quot;SMRN18&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN19.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN19.png&quot; alt=&quot;SMRN19&quot;&gt;&lt;/a&gt;&lt;br&gt;Note that the NSLog() did work, but the React Native framework displayed the red screen.&lt;br&gt;The fix for this is to add “nonnull” to the CalendarManagerBridge.m file:&lt;br&gt;    RCT_EXTERN_METHOD(addEvent:(NSString&lt;em&gt;)name location:(NSString&lt;/em&gt;)location date:(nonnull NSNumber*)date)&lt;br&gt;With this change, the app works without any errors. We can also see in the Xcode console the NSLog() output:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN20.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN20.png&quot; alt=&quot;SMRN20&quot;&gt;&lt;/a&gt;&lt;br&gt;(Note: I created a GitHub issue about this problem with the React Native documentation page and it has been fixed).&lt;br&gt;We have verified we can access the arguments passed to our Swift method from JavaScript.&lt;br&gt;We cannot simply return values to JavaScript because React Native’s JavaScript/Native bridge is asynchronous. That is, you have to implement your Swift method with a callback parameter and call it with a callback function from JavaScript, or you may implement events.&lt;br&gt;Let’s examine the callback mechanism first. Change the RCT_EXTERN_METHOD line in CalendarManagerBridge.m to read:&lt;br&gt;    RCT_EXTERN_METHOD(addEvent:(NSString&lt;em&gt;)name location:(NSString&lt;/em&gt;)location date:(nonnull NSNumber*)date callback:(RCTResponseSenderBlock)callback);&lt;br&gt;This adds a 4th parameter to the method, a callback function. In CalendarManager.swift, we need to alter the the addEvent() method:&lt;br&gt;    @objc func addEvent(name:String, location:String, date:NSNumber, callback:(NSObject)-&amp;gt;())-&amp;gt;Void{// Date is ready to use!NSLog(“%@ %@ %@”, name, location, date) callback([[“name”: name,”location”: location,”date”: date&lt;br&gt;     ]])}&lt;br&gt;What this version of addEvent() does is call the callback() method with a JavaScript Object that has the argument names/values as key/value pairs. In Swift, we create an NSObject with the [ key: value ] syntax. The argument to the callback from Swift is an array of argument values. In this case, we have just the one Object.&lt;br&gt;We need to modify the JavaScript code in index.ios.js to pass a callback. It should look like this:&lt;br&gt;    React.NativeModules.CalendarManager.addEvent(“One”,”Two”,3,function(o){    console.log(‘InCallback’);    console.dir(o);});&lt;br&gt;When we run this version of the code in the simulator, this is displayed in the JavaScript debugger console:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN21.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN21.png&quot; alt=&quot;SMRN21&quot;&gt;&lt;/a&gt;&lt;br&gt;In order to use events, we need to modify the ‘CalendarManager-Bridging-Header.h’ file to import additional headers from React Native. The file should read:&lt;br&gt;    ////  Use this file to import your target’s public headers that you would like to expose to Swift.//// CalendarManager-Bridging-Header.h#import “RCTBridge.h”#import “RCTBridgeModule.h”#import “RCTEventDispatcher.h”&lt;br&gt;An RCTBridge instance contains an eventDispatcher that we can use to send events to JavaScript from Swift. In order to get this instance, we can have one synthesized for us in our CalendarManager class. We can also verify that it is synthesized by using NSLog() to dump its value.&lt;br&gt;Modify the class’ code in CalendarManager.swift so it looks like this:&lt;br&gt;    classCalendarManager:NSObject{var bridge:RCTBridge!// this is synthesized@objc func addEvent(name:String, location:String, date:NSNumber, callback:(NSObject)-&amp;gt;())-&amp;gt;Void{// Date is ready to use!NSLog(“Bridge: %@”,self.bridge);NSLog(“%@ %@ %@”, name, location, date)    callback([[“name”: name,”location”: location,”date”: date&lt;br&gt;          ]])}}&lt;br&gt;There is the bridge member that will be synthesized and in the addEvent() method there is a call to NSLog() to print the value of the bridge. The value printed should be some hex number that’s the address of the bridge instance.&lt;br&gt;When we run the code, we can see that the bridge member is synthesized:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN22.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN22.png&quot; alt=&quot;SMRN22&quot;&gt;&lt;/a&gt;&lt;br&gt;Note that the code uses NSLog() instead of print(). NSLog is synchronized and works better with threading. It also prints a timestamp and prints to the device console when running on device.&lt;br&gt;Ultimately debug logging should be wrapped by some other means so the printing can be disabled or directed as you want.&lt;br&gt;Modify the CalenderManager class one more time so it looks like this:&lt;br&gt;    classCalendarManager:NSObject{var bridge:RCTBridge!// this is synthesized@objc func addEvent(name:String, location:String, date:NSNumber, callback:(NSObject)-&amp;gt;())-&amp;gt;Void{// Date is ready to use!NSLog(“Bridge: %@”,self.bridge);NSLog(“%@ %@ %@”, name, location, date)let ret =[“name”: name,”location”: location,”date”: date&lt;br&gt;          ]    callback([ret])self.bridge.eventDispatcher.sendAppEventWithName(“EventReminder”, body: ret)}}&lt;br&gt;The sendAppEventWithName() method takes an event name and an arbitrary object that is sent to the JavaScript event handler. In the code above, we’re assigning the NSObject with arguments as key/value pairs to a variable and using it to pass to both the callback() and the event argument.&lt;br&gt;Modify the JavaScript code near the top of index.ios.js so it reads:&lt;br&gt;    varReact=require(‘react-native’)console.dir(React.NativeModules.CalendarManager)var subscription =React.NativeAppEventEmitter.addListener(‘EventReminder’,(reminder)=&amp;gt;{        console.log(‘EVENT’)        console.log(‘name: ‘+ reminder.name)        console.log(‘location: ‘+ reminder.location)        console.log(‘date: ‘+ reminder.date)});React.NativeModules.CalendarManager.addEvent(“One”,”Two”,3,function(o){    console.log(‘In Callback’)    console.dir(o)})&lt;br&gt;We’re really just adding the subscription logic before calling addEvent(). When we run this version of the code, we see the expected output in the Chrome console:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN23.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN23.png&quot; alt=&quot;SMRN23&quot;&gt;&lt;/a&gt;&lt;br&gt;Finally, let’s export some constant members from the CalendarManager swift class to JavaScript. Add this code to the CalendarManager class before the closing brace:&lt;br&gt;    @objc func constantsToExport()-&amp;gt;NSObject{return[“x”:1,”y”:2,”z”:”Arbitrary string”]}&lt;br&gt;When we run the project and expand the first Object printed in the Chrome console, we see our constants:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN24.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;img src=&quot;http://moduscreate.com/wp-content/uploads/2016/01/SMRN24.png&quot; alt=&quot;SMRN24&quot;&gt;&lt;/a&gt;&lt;br&gt;In conclusion, we now have patterns to interface Swift native code to our JavaScript in React Native. From here we can implement our application logic in either language, as appropriate.&lt;/p&gt;
&lt;p&gt;From:  &lt;a href=&quot;http://moduscreate.com/swift-modules-for-react-native/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://moduscreate.com/swift-modules-for-react-native/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
       Swift Modules for React Native 
    
    </summary>
    
      <category term="Swift" scheme="http://offbye.com/categories/Swift/"/>
    
      <category term="react native" scheme="http://offbye.com/categories/Swift/react-native/"/>
    
      <category term="module" scheme="http://offbye.com/categories/Swift/react-native/module/"/>
    
    
  </entry>
  
  <entry>
    <title>Android官方MVP架构示例项目解析</title>
    <link href="http://offbye.com/2016/04/15/Android%E5%AE%98%E6%96%B9MVP%E6%9E%B6%E6%9E%84%E7%A4%BA%E4%BE%8B%E9%A1%B9%E7%9B%AE%E8%A7%A3%E6%9E%90/"/>
    <id>http://offbye.com/2016/04/15/Android官方MVP架构示例项目解析/</id>
    <published>2016-04-15T09:56:00.000Z</published>
    <updated>2016-05-12T16:40:01.000Z</updated>
    
    <content type="html">&lt;p&gt;App架构在Android开发者中一直是讨论比较多的一个话题，目前讨论较多的有MVP、MVVM、Clean这三种。google官方对于架构的态度一直是非常开放的，让开发者自主选择组织和架构app的方式，期望能留给开发者更多的灵活性。&lt;br&gt;由于没有一套权威的架构实现，现在很多App项目中在架构方面都有或多或少的问题。第一种常见问题是没有架构，需求中的一个页面对应项目中的一个activity或一个fragment，所有的界面响应代码、业务逻辑代码、数据请求代码等等都集中在其中。第二种常见的问题是架构实现的不断变化，不断在各种架构间摇摆，一直找不到一个适合自己的架构。&lt;br&gt;就在近日，google在官方示例中给出了一系列不同架构的app实现，这对于一直困惑于到底该用何种架构的android开发者来说确实是福音，开发者只要根据自己项目的情况，在不同的实现中选择一种即可，当然google也明确表示了这些示例只是用来做参考，而并不是要为了当做标准，下面先为大家简单介绍下此项目。&lt;/p&gt;
&lt;p&gt;项目介绍&lt;/p&gt;
&lt;p&gt;Google把这个项目命名为：Android架构蓝图。&lt;br&gt;项目地址为：&lt;a href=&quot;&quot;&gt;https://github.com/googlesamples/android-architecture&lt;/a&gt;&lt;br&gt;下面的内容引用自项目说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目目的是通过展示各种架构app的不同方式来帮助开发者解决架构问题。项目中通过不同的架构概念及方式实现了功能相同的app。你可以用示例来当做参考，或是干脆拿来当做创建app项目的基础。项目中，希望大家能把关注点集中到代码结构、整体架构、可测试性、可维护性这四个方面。当然实现app有很多种方式，千万不要把它当做定式。&lt;br&gt;项目中有哪些示例&lt;br&gt;目前已经完成的示例有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;todo-mvp（mvp基础架构示例）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;todo-mvp-loaders（基于mvp基础架构项目，获取数据部分使用了Loaders架构）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;todo-mvp-databinding（基于mvp基础架构项目，使用了数据绑定组件）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;仍在进展中的示例有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;todo-mvp-contentproviders（基于mvp基础架构项目，使用了Content Providers）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;todo-mvp-clean（基于mvp基础架构项目，使用了clean架构的概念）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;todo-mvp-dagger（基于mvp基础架构项目，使用了dagger2进行依赖注入）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如何进行选择&lt;br&gt;这个还是需要开发者自己来做决定，每个项目的说明文件中都说明了该实现的特性。app规模、团队状况、维护工作量的大小、平板是否支持、代码简洁程度偏好，这些都会影响你的选择。&lt;br&gt;到了这里，想必大家都很想一探究竟了，到底官方示例是如何实现的呢？还是那句话，源码面前，了无秘密。为了能够更好的理解官方mvp架构实现，下面我们从源码的角度来分析todo-mvp（mvp基础架构示例）的实现。我们先从项目的整体组织方式开始，再看项目究竟使用了哪些组件，最后当然是最重要的具体mvp的实现方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;源码分析&lt;/p&gt;
&lt;p&gt;项目代码组织方式&lt;br&gt;项目含一个app src目录，4个测试目录，分别是androidTest（UI层测试）、androidTestMock（UI层测试mock数据支持）、test（业务层单元测试）、mock（业务层单元测试mock数据支持）。src目录的代码组织方式完全是按照功能来组织的，功能内部分为xactivity、xcontract、xfragment、xpresenter四个类文件(x代表业务名称)。&lt;br&gt;平时用到较多的另一种组织方式是按照类型，比如按照activity、adapter、fragment、contract、presenter进行划分，不同的类文件分别放到不同的目录中，笔者觉得两种方式没有什么太大的区别，完全看个人喜好了。&lt;br&gt;组件使用&lt;br&gt;由于项目是基于gradle进行编译的，所以我们可以从build.gradle文件看到项目依赖的全貌。&lt;br&gt;Guava&lt;br&gt;项目中使用到了Guava库（&lt;a href=&quot;&quot;&gt;https://github.com/google/guava&lt;/a&gt;），该库是Google在基于java的项目中都会引用到得一个库，库中包含大约14k的方法数，是个很大的库，其中包含了集合、缓存、并发、基本注解、字符串处理、io处理等等。项目中使用Guava库主要是处理null这种不安全的情况，因为一般我们在使用有可能为null的对象时，一般会增加一次判断，代码如下：&lt;br&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz/ibnDKD3ktAoY14s6EJ9BcGia4GjB7HuMZE3CCTbZ3V6HKseG3liaxkWyiaMnMW3bYhOFmzMYsSmiameHppDvngbibW4A/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;而如果有Guava的时候，可以通过如下方式&lt;br&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz/ibnDKD3ktAoY14s6EJ9BcGia4GjB7HuMZEYWI2fDhf5SbqouFvDCjKLs83rVINllCeQLDwHXHicNJF656u0HwTTlQ/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样面对空的时候，就不用再多写很多代码了，确实是方便了很多。但是不建议为了null安全直接引入如此大的一个库，因为我们都知道android apk的65k方法数限制，如果要用的话可以把源码中涉及到得部分直接拿出来用。当然Guava中还有很多重要的功能，其他功能读者可以自行研究，关于Guava就先到这里了。&lt;br&gt;测试相关组件&lt;br&gt;示例项目在可测试方面做的非常好，由于对视图逻辑(view层)和业务逻辑(presenter层)进行了拆分，所以我们就可以对UI、业务代码分别进行测试。为了进行UI测试引入了Espresso，为了对业务层进行单元测试引入了junit，为了生成测试mock对象引入了mockito，为了支撑mockito又引入了dexmaker，hamcrest的引入使得测试代码的匹配更接近自然语言，可读性更高，更加灵活。&lt;br&gt;项目MVP实现方式&lt;br&gt;这节我们就具体来看官方示例到底是如何实现mvp的。这里我们先看下总体的轮廓，关于项目中业务代码我们仅列出了任务详情页（taskDetail）的相关类，其他业务代码类似。&lt;br&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz/ibnDKD3ktAoY14s6EJ9BcGia4GjB7HuMZEoDqstaicIwQnRNFnG7gLibtwXlGOzjQOfV6Pa9Eqpt4jGGUvw6rnqhrQ/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;基类&lt;br&gt;我们首先来看两个Base接口类，BasePresenter与BaseView，两类分别是所有Presenter与View的基类。&lt;br&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz/ibnDKD3ktAoY14s6EJ9BcGia4GjB7HuMZEq0Dl1iboKkY273ic9S5hmy6Mr9HS7BIgsdLm0sKErickoL4mkUrPbTpeA/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;BasePresenter中含有方法start(),该方法的作用是presenter开始获取数据并调用view中方法改变界面显示，其调用时机是在Fragment类的onResume方法中。&lt;br&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz/ibnDKD3ktAoY14s6EJ9BcGia4GjB7HuMZEQzqEUSJYctsh55iakr0IH4tNVCicEzupCvicajj1qglw3GEq2N2eDvXnA/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;BaseView中含方法setPresenter，该方法作用是在将presenter实例传入view中，其调用时机是presenter实现类的构造函数中。&lt;br&gt;契约类&lt;br&gt;与笔者之前见到的所有mvp实现都不同，官方的实现中加入了契约类来统一管理view与presenter的所有的接口，这种方式使得view与presenter中有哪些功能，一目了然，维护起来也方便，实例如下&lt;br&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz/ibnDKD3ktAoY14s6EJ9BcGia4GjB7HuMZEcN2BicU7pQicgpjpAbWbsGuRTHdfQQBD5icyw5aNcwNKFWoyvOrLjiaJhg/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;activity在mvp中的作用&lt;br&gt;activity在项目中是一个全局的控制者，负责创建view以及presenter实例，并将二者联系起来，下面是activity中创建view及presenter的代码&lt;br&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz/ibnDKD3ktAoY14s6EJ9BcGia4GjB7HuMZEuJu3LyP0t1z7jHk73167kTiblps610icIES1xcEQ4RfpPibRUcvhPIGPw/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们可以从上面看到整个创建过程，而且要注意的是创建后的fragment实例作为presenter的构造函数参数被传入，这样就可以在presenter中调用view中的方法了。&lt;br&gt;mvp的实现与组织&lt;br&gt;实例中将fragment作为view层的实现类，为什么是fragment呢？有两个原因，第一个原因是我们把activity作为一个全局控制类来创建对象，把fragment作为view，这样两者就能各司其职。第二个原因是因为fragment比较灵活，能够方便的处理界面适配的问题。我们先看view的实现，我们只挑一部分重要的方法来看&lt;br&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz/ibnDKD3ktAoY14s6EJ9BcGia4GjB7HuMZEPiaJulqH9SBzQJlTPJFZLSULxrfh6AUmZwossvQD33LfpPlQZEb9fWA/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上面可以看到setPresenter方法，该方法继承于父类，通过该方法，view获得了presenter得实例，从而可以调用presenter代码来处理业务逻辑。我们看到在onResume中还调用了presenter得start方法，下面我们再看presenter的实现&lt;br&gt;&lt;img src=&quot;http://mmbiz.qpic.cn/mmbiz/ibnDKD3ktAoY14s6EJ9BcGia4GjB7HuMZE47Wu7nAjnhzVQENMmv0tCOB8Lfq6N5Im1NS2jzEmZRFqNSypTJAwtg/640?wx_fmt=png&amp;amp;tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;presenter构造函数中调用了view得setPresenter方法将自身实例传入，start方法中处理了数据加载与展示。如果需要界面做对应的变化，直接调用view层的方法即可，这样view层与presenter层就能够很好的被划分。&lt;br&gt;最后还剩下model层实现，项目中model层最大的特点是被赋予了数据获取的职责，与我们平常model层只定义实体对象截然不同，实例中，数据的获取、存储、数据状态变化都是model层的任务，presenter会根据需要调用该层的数据处理逻辑并在需要时将回调传入。这样model、presenter、view都只处理各自的任务，此种实现确实是单一职责最好的诠释。&lt;/p&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;p&gt;到这里我们就基本分析完了，我们再来整体看下官方的实现方式有哪些特性。&lt;br&gt;首先是复杂度，我们可以从上面的分析看出整体的复杂度还是较低的，易学的；然后是可测试性，由于将UI代码与业务代码进行了拆分，整体的可测试性非常的好，UI层和业务层可以分别进行单元测试；最后是可维护性和可扩展性，由于架构的引入，虽然代码量有了一定的上升，但是由于界限非常清晰，各个类职责都非常明确且单一，后期的扩展，维护都会更加容易。有了这个架构之后，我们再回头看下之前的实现是不是有很多不足，没有关系，那么接下来就是在项目中进行实践的时间了。&lt;/p&gt;
&lt;p&gt;原文&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4MjA0MTc4NQ==&amp;amp;mid=404088059&amp;amp;idx=3&amp;amp;sn=78dafacbca09b0d7345344c3eef24aff&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mp.weixin.qq.com/s?__biz=MzA4MjA0MTc4NQ==&amp;amp;mid=404088059&amp;amp;idx=3&amp;amp;sn=78dafacbca09b0d7345344c3eef24aff&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
       Android官方MVP架构示例项目解析 
    
    </summary>
    
      <category term="android" scheme="http://offbye.com/categories/android/"/>
    
      <category term="mvp" scheme="http://offbye.com/categories/android/mvp/"/>
    
      <category term="架构" scheme="http://offbye.com/categories/android/mvp/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>使用swift开发Cordova插件</title>
    <link href="http://offbye.com/2016/04/15/%E4%BD%BF%E7%94%A8swift%E5%BC%80%E5%8F%91Cordova%E6%8F%92%E4%BB%B6/"/>
    <id>http://offbye.com/2016/04/15/使用swift开发Cordova插件/</id>
    <published>2016-04-15T07:55:00.000Z</published>
    <updated>2016-05-12T16:40:01.000Z</updated>
    
    <content type="html">&lt;p&gt;最近研究了用swift开发cordova插件的问题，事实证明用swift开发cordova插件是完全可行的，不要再去折腾烦人的oc代码了！主要参考了一个地理围栏插件 &lt;a href=&quot;https://github.com/cowbell/cordova-plugin-geofence&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/cowbell/cordova-plugin-geofence&lt;/a&gt; ，然后自己根据需求开发了百度地图标注和带扫描效果的二维码扫描iOS cordova插件，官方的那个实在太差了。&lt;br&gt;用swift开发插件主要是在项目的 Bridging-Header.h中加入Cordova和插件本身用到的头文件，然后插件类定义要以&lt;br&gt;@objc(HWPXXXXPlugin) class 开头，其它和oc插件基本一样了。示意代码如下&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  BaiduMapMarkPlugin.swift&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  cordova-BaiduMapMarkPlugin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Created by zxt on 2016/04/08.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import Foundation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import WebKit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@available(iOS &lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt;, *)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@objc(HWPBaiduMapMarkPlugin) class BaiduMapMarkPlugin : CDVPlugin &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func initialize(command: CDVInvokedUrlCommand) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;BaiduMapMarkPlugin initialization&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func location(command: CDVInvokedUrlCommand) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;location&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var pointUser = PointUser()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; command.arguments != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; command.arguments.count &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            let geoInfo = command.arguments[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] as! String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(geoInfo)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            let point = convertStringToDictionary(geoInfo)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(convertStringToDictionary(geoInfo))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pointUser.storeName = point![&lt;span class=&quot;string&quot;&gt;&quot;storeName&quot;&lt;/span&gt;]!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pointUser.pro = point![&lt;span class=&quot;string&quot;&gt;&quot;pro&quot;&lt;/span&gt;]!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pointUser.city = point![&lt;span class=&quot;string&quot;&gt;&quot;city&quot;&lt;/span&gt;]!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pointUser.dist = point![&lt;span class=&quot;string&quot;&gt;&quot;dist&quot;&lt;/span&gt;]!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pointUser.address = point![&lt;span class=&quot;string&quot;&gt;&quot;address&quot;&lt;/span&gt;]!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pointUser.latitude = Double(point![&lt;span class=&quot;string&quot;&gt;&quot;latitude&quot;&lt;/span&gt;]!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pointUser.longitude = Double(point![&lt;span class=&quot;string&quot;&gt;&quot;longitude&quot;&lt;/span&gt;]!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(pointUser)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let mapVc = BaiduMapViewController()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mapVc.isAnon = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mapVc.pointUser = pointUser&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mapVc.callBackId = command.callbackId&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mapVc.baiduMapMarkPlugin = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewController?.presentViewController(mapVc, animated: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,completion: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func convertStringToDictionary(text: String) -&amp;gt; [String:String]? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; let data = text.dataUsingEncoding(&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; try &lt;span class=&quot;built_in&quot;&gt;NSJSONSerialization&lt;/span&gt;.JSONObjectWithData(data, options: []) as? [String:String]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; catch let error as &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                print(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;百度地图标注cordova插件项目地址：&lt;br&gt;&lt;a href=&quot;https://github.com/offbye/cordova-plugin-qianmi-baidumapmark&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/offbye/cordova-plugin-qianmi-baidumapmark&lt;/a&gt; &lt;/p&gt;
</content>
    
    <summary type="html">
    
       使用swift开发Cordova插件 
    
    </summary>
    
      <category term="Swift" scheme="http://offbye.com/categories/Swift/"/>
    
      <category term="cordova" scheme="http://offbye.com/categories/Swift/cordova/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift语言中的@available 和</title>
    <link href="http://offbye.com/2016/04/14/Swift%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84@available%20%E5%92%8C%20#available/"/>
    <id>http://offbye.com/2016/04/14/Swift语言中的@available 和 #available/</id>
    <published>2016-04-14T05:43:00.000Z</published>
    <updated>2016-05-12T16:40:02.000Z</updated>
    
    <content type="html">&lt;p&gt;Swift 2.0 中，引入了可用性的概念。对于函数，类，协议等，可以使用&lt;code&gt;@available&lt;/code&gt;声明这些类型的生命周期依赖于特定的平台和操作系统版本。而&lt;code&gt;#available&lt;/code&gt;用在判断语句中（if, guard, while等），在不同的平台上做不同的逻辑。&lt;br&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;##@available&lt;/p&gt;
&lt;p&gt;###用法&lt;br&gt;&lt;code&gt;@available&lt;/code&gt;放在函数（方法），类或者协议前面。表明这些类型适用的平台和操作系统。看下面一个例子：&lt;br&gt;    @available(iOS 9, *)&lt;br&gt;    funcmyMethod() {&lt;br&gt;        // do something&lt;br&gt;    }&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@available(iOS 9, *)&lt;/code&gt;必须包含至少2个特性参数，其中&lt;code&gt;iOS 9&lt;/code&gt;表示必须在 iOS 9 版本以上才可用。如果你部署的平台包括 iOS 8 , 在调用此方法后，编译器会报错。&lt;br&gt;另外一个特性参数：星号（*），表示包含了所有平台，目前有以下几个平台：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;li&gt;iOSApplicationExtension&lt;/li&gt;
&lt;li&gt;OSX&lt;/li&gt;
&lt;li&gt;OSXApplicationExtension&lt;/li&gt;
&lt;li&gt;watchOS&lt;/li&gt;
&lt;li&gt;watchOSApplicationExtension&lt;/li&gt;
&lt;li&gt;tvOS&lt;/li&gt;
&lt;li&gt;tvOSApplicationExtension&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来讲，如果没有特殊的情况，都使用&lt;code&gt;*&lt;/code&gt;表示全平台。&lt;br&gt;&lt;code&gt;@available(iOS 9, *)&lt;/code&gt;是一种简写形式。全写形式是&lt;code&gt;@available(iOS, introduced=9.0)&lt;/code&gt;。&lt;code&gt;introduced=9.0&lt;/code&gt;参数表示指定平台(iOS)从 9.0 开始引入该声明。为什么可以采用简写形式呢？当只有&lt;code&gt;introduced&lt;/code&gt;这样一种参数时，就可以简写成以上简写形式。同理：@available(iOS 8.0, OSX 10.10, *) 这样也是可以的。表示同时在多个平台上（iOS 8.0 及其以上；OSX 10.10及其以上）的可用性。&lt;br&gt;另外，&lt;code&gt;@available&lt;/code&gt;还有其他一些参数可以使用，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deprecated=版本号&lt;/code&gt;：从指定平台某个版本开始过期该声明&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obsoleted=版本号&lt;/code&gt;：从指定平台某个版本开始废弃（注意弃用的区别，&lt;code&gt;deprecated&lt;/code&gt;是还可以继续使用，只不过是不推荐了，&lt;code&gt;obsoleted&lt;/code&gt;是调用就会编译错误）该声明&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message=信息内容&lt;/code&gt;：给出一些附加信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unavailable&lt;/code&gt;：指定平台上是无效的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;renamed=新名字&lt;/code&gt;：重命名声明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上参数具体可以参考&lt;a href=&quot;http://wiki.jikexueyuan.com/project/swift/chapter3/06_Attributes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###available&lt;br&gt;&lt;code&gt;#available&lt;/code&gt; 用在条件语句代码块中，判断不同的平台下，做不同的逻辑处理，比如：&lt;br&gt;    if#available(iOS 8, *) {&lt;br&gt;    // iOS 8 及其以上系统运行&lt;br&gt;    }&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;guard #available(iOS 8, *) else {
return//iOS 8 以下系统就直接返回
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;###stackoverflow 相关问题整理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/32761511/difference-between-available-and-available-in-swift-2-0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Difference between @available and #available in swift 2.0&lt;/a&gt;: @available 和 #available&lt;br&gt;帖子里面还提到一个问题：&lt;code&gt;@available&lt;/code&gt;是编译期间判断的吗？而&lt;code&gt;#available&lt;/code&gt;是运行时行为吗&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
       Swift语言中的@available 和 #available 
    
    </summary>
    
      <category term="Swift" scheme="http://offbye.com/categories/Swift/"/>
    
      <category term="available" scheme="http://offbye.com/categories/Swift/available/"/>
    
    
  </entry>
  
</feed>
